{
    "@context": [
        "https://www.w3.org/ns/activitystreams"
    ],
    "to": ["https://www.w3.org/ns/activitystreams#Public"],
    "name": "Docker 基礎指令",
    "type": "Article","content": "\u003ch1 id=\"docker-指令\"\u003eDocker 指令\u003c/h1\u003e\n\u003ch2 id=\"install\"\u003eInstall\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eapt install docker docker.io docker-compose\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"what-is-docker\"\u003eWhat is docker\u003c/h2\u003e\n\u003cp\u003eDocker 是一個容器化的技術，基本上使用的時候可以把他當成虛擬機，雖然他們的使用的技術完全不一樣。對新手來說，在 Docker 裡面有四個重要的名詞：dockerfile, docker image, docker container, docker-compose。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003edockerfile\u003cbr\u003e\n純文字檔，定義建立 docker image 的步驟，有點像是一個 bash shell。通常命名成 \u003ccode\u003eDockerfile\u003c/code\u003e ，在 build 的時候會預設用這個，也可以用 \u003ccode\u003e-f\u003c/code\u003e 來指定其他的檔案。\u003c/li\u003e\n\u003cli\u003edocker image\u003cbr\u003e\n這是透過 \u003ccode\u003edocker build\u003c/code\u003e 編譯出來的東西。可以想成 docker container 的藍圖，在 \u003ccode\u003edocker pull\u003c/code\u003e 的時候也是下載 docker image 而不是 dockerfile。基本上 image 裡面已經包括了編譯好的執行檔和基本的環境設定，所以在 docker 外面是不用做他設定的，這也是 docker 的魅力所在。\u003c/li\u003e\n\u003cli\u003edocker container\u003cbr\u003e\n每個 docker image 可以產生很多個 container，也就是執行中的程式。在這裡你已經可以用 docker 來建立各種服務了。這裡也可以想像成虛擬機，用 \u003ccode\u003edocker exec -it container_name bash\u003c/code\u003e 可以進到 container 裡面(如果裡面有 bash 的話)\u003c/li\u003e\n\u003cli\u003edocker-compose\u003cbr\u003e\n一個服務不是一個 container 就可以架起來的，通常需要好幾個 container。這時候如果透過指令啟動也許會有忘記啟動和設定複雜的問題，所以有了這個工具。他透過 yml 設定來啟動服務。值得注意的是在同一個 \u003ccode\u003edocker-compose.yml\u003c/code\u003e 啟動的 container 會在同一個網路內而和外面隔開，所以如果是 containers 之間的通訊不用把 port 暴露出來，只有開給外面的要 expose。\u003c/li\u003e\n\u003c/ol\u003e\n","mediaType": "text/html",
    "published": "2020-09-10T00:00:00+00:00",
    "updated": "2020-09-10T00:00:00+00:00",
    "id": "https://blog.simbafs.cc/p/linux/docker/docker-command/",
    "url": "https://blog.simbafs.cc/p/linux/docker/docker-command/",
    "attributedTo": "https://blog.simbafs.cc"
}