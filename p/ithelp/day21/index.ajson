{
    "@context": [
        "https://www.w3.org/ns/activitystreams"
    ],
    "to": ["https://www.w3.org/ns/activitystreams#Public"],
    "name": "Day 21：儲存器與剪貼簿",
    "type": "Article","content": "\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:center\"\u003e\u003cimg src=\"/images/ithelp/pure-CLI-IDE/day21/stackoverflow-meme.png\"\n\t\n\t\n\t\n\tloading=\"lazy\"\n\t\n\t\talt=\"stackoverflow meme\"\n\t\n\t\n\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003efrom: \u003ca class=\"link\" href=\"https://stackoverflow.blog/2021/04/19/how-often-do-people-actually-copy-and-paste-from-stack-overflow-now-we-know/\"  target=\"_blank\" rel=\"noopener\"\n    \u003ehttps://stackoverflow.blog/2021/04/19/how-often-do-people-actually-copy-and-paste-from-stack-overflow-now-we-know/\u003c/a\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e這個是一個 梗圖，大意是你寫程式一定會用到 CTRL-C 和 CTRL-V。我們今天就來看看 vim 的剪貼簿吧！\u003cbr\u003e\n在用剪貼簿時，複製的來源可能會有很多種，以我們的環境為例，可能會用系統剪貼簿、tmux 和 vim 本身的剪貼簿\u003c/p\u003e\n\u003ch1 id=\"系統剪貼簿\"\u003e系統剪貼簿\u003c/h1\u003e\n\u003cp\u003e基本上對 vim 來說系統剪貼簿和 tmux 在複製貼上是差不多的，在輸入模式貼上就可以了\u003cbr\u003e\n但是要注意多行的程式碼貼上時 vim 會把縮排搞亂，所以你要嘛用 \u003ccode\u003e\u0026lt;leader\u0026gt;f\u003c/code\u003e 重新整理程式碼，或是用命令 \u003ccode\u003e:r!cat\u003c/code\u003e，貼上後再按 \u003ccode\u003eC-d\u003c/code\u003e 貼到程式裡面。\u003cbr\u003e\n\u003ccode\u003e:r!cat\u003c/code\u003e 這個命令在 \u003ca class=\"link\" href=\"../day13\" \u003eDay 13\u003c/a\u003e 時有把他寫成快捷鍵 \u003ccode\u003e\u0026lt;F3\u0026gt;\u003c/code\u003e 了，所以你也可以直接按 \u003ccode\u003e\u0026lt;F3\u0026gt; \u003c/code\u003e 會有一樣的效果\u003c/p\u003e\n\u003cp\u003e另外，下面會講到用 vim 命令存取系統剪貼簿\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e❓ \u003ccode\u003e:r!cat\u003c/code\u003e 是什麼意思？\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e\u003ccode\u003er\u003c/code\u003e 這個命令是「載入某個檔案並貼到游標行下面」，用法是 \u003ccode\u003e:r {file}\u003c/code\u003e。但是我們這裡不用檔名，\u003ccode\u003e!cat\u003c/code\u003e 在這裡的意思是「shell 命令 \u003ccode\u003ecat\u003c/code\u003e 的 stdout 這個檔案」，而執行 \u003ccode\u003ecat\u003c/code\u003e 時需要 stdin，也就是你剛剛貼上程式碼的地方（在 status bar 下面）。這個方法可以繞過自動縮排，就不會出現程式碼貼上被 vim 弄亂的情形了。\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"從-vim-複製\"\u003e從 vim 複製\u003c/h2\u003e\n\u003cp\u003e複製到系統剪貼簿很簡單，在選取時記的按住 \u003ccode\u003e\u0026lt;SHIFT\u0026gt;\u003c/code\u003e 就行了，但是因為我們有開啟 vim 滑鼠模式，所以 tmux 剪貼簿就不能複製了（滑鼠被 vim 搶走）（關於 tmux 剪貼簿請看 \u003ca class=\"link\" href=\"../day09#%e8%a4%87%e8%a3%bd\" \u003eDay 09#複製\u003c/a\u003e。\u003c/p\u003e\n\u003ch1 id=\"vim-基礎剪貼簿\"\u003evim 基礎剪貼簿\u003c/h1\u003e\n\u003cp\u003e在 vim 裡面，你可用基礎的 \u003ccode\u003eyy\u003c/code\u003e、\u003ccode\u003edd\u003c/code\u003e、\u003ccode\u003ex\u003c/code\u003e 等指令將文字放進剪貼簿，或是更進階的 \u003ccode\u003ed4w\u003c/code\u003e、\u003ccode\u003ey5l\u003c/code\u003e 等等。\u003cbr\u003e\n貼上的話比較單純，就只有 \u003ccode\u003ep\u003c/code\u003e 一個（還有 \u003ccode\u003eP\u003c/code\u003e ）\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003e❓ \u003ccode\u003ep\u003c/code\u003e 和 \u003ccode\u003eP\u003c/code\u003e 的差別\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e小寫 \u003ccode\u003ep\u003c/code\u003e 會把內容貼到游標後，大寫 \u003ccode\u003eP\u003c/code\u003e 會把內容貼到游標前\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 id=\"vim-進階剪貼簿\"\u003evim 進階剪貼簿\u003c/h1\u003e\n\u003cp\u003e在 vim 裡面有個東西叫做 register，中文大概是「儲存器」之類的，我們這邊就這樣叫他。\u003cbr\u003e\n這個東西就是「有命名的」剪貼簿（包含剛剛用的「未命名的」剪貼簿）\u003cbr\u003e\n這個東西可以分成兩類，一是可寫的，另一類是有特殊意義的儲存器\u003c/p\u003e\n\u003ch2 id=\"列出儲存器\"\u003e列出儲存器\u003c/h2\u003e\n\u003cp\u003e在開始介紹儲存器之前，我們先來看看如何查看儲存器，這樣你在學使用他時就可以一邊操作一邊對照。\u003cbr\u003e\n列出儲存器內容的命令是 \u003ccode\u003e:registers\u003c/code\u003e 或是縮寫 \u003ccode\u003e:reg\u003c/code\u003e，他會列出所有目前儲存器中有的內容\u003c/p\u003e\n\u003ch2 id=\"寫入可寫的的儲存器\"\u003e寫入可寫的的儲存器\u003c/h2\u003e\n\u003cp\u003evim 中可寫的儲存器並不是隨便你命名，只有 0 ~ 9 和 a - z，另外這是不分大小寫，所以 a ~ z 和 A ~ Z 是一樣的。\u003cbr\u003e\n要存入儲存器方法很簡單，只要在指令（\u003ccode\u003eyy\u003c/code\u003e、\u003ccode\u003ed4w\u003c/code\u003e 之類的）之前加上 \u003ccode\u003e\u0026quot;x\u003c/code\u003e，這個 \u003ccode\u003ex\u003c/code\u003e 代指儲存器代號（[0-9a-z]）\u003cbr\u003e\n例如「把整行存入 \u003ccode\u003eg\u003c/code\u003e 儲存器」的指令就是 \u003ccode\u003e\u0026quot;gyy\u003c/code\u003e（注意沒有冒號，直接在命令模式打）。\u003c/p\u003e\n\u003ch2 id=\"貼上可寫的的儲存器\"\u003e貼上可寫的的儲存器\u003c/h2\u003e\n\u003ch3 id=\"命令模式\"\u003e命令模式\u003c/h3\u003e\n\u003cp\u003e在命令模式中，和寫入時的用法一樣，在 \u003ccode\u003ep\u003c/code\u003e 之前加上 \u003ccode\u003e\u0026quot;x\u003c/code\u003e\u003cbr\u003e\n例如「把儲存器 \u003ccode\u003eg\u003c/code\u003e 中的內容貼上」的指令就是 \u003ccode\u003e\u0026quot;gp\u003c/code\u003e\u003c/p\u003e\n\u003ch3 id=\"編輯模式\"\u003e編輯模式\u003c/h3\u003e\n\u003cp\u003e如果你不想為了貼上一段字切換到命令模式（尤其是打中文時切輸入法很痛苦），你可以用 \u003ccode\u003e\u0026lt;C-r\u0026gt;\u003c/code\u003e 加上編號貼上\u003cbr\u003e\n例如「把儲存器 \u003ccode\u003eg\u003c/code\u003e 中的內容貼上」的指令就是 \u003ccode\u003e\u0026lt;C-r\u0026gt;g\u003c/code\u003e\u003c/p\u003e\n\u003ch2 id=\"有特殊意義儲存器\"\u003e有特殊意義儲存器\u003c/h2\u003e\n\u003cp\u003e以下我用表格列出有特殊意義的儲存器，他們也都是一個字元代表\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:center\"\u003e儲存器\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003e描述\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e\u003ccode\u003e\u0026quot;\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003es 命名儲存器（預設的，如果不指定就是存到這裡面）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e「剪下」（ \u003ccode\u003ed2w\u003c/code\u003e、\u003ccode\u003ex\u003c/code\u003e 之類的）的少於一行的（不包括換行）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e\u003ccode\u003e:\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e上次執行的冒號命令\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e\u003ccode\u003e.\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e上次輸入模式輸入的文字（唯讀）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e\u003ccode\u003e%\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e目前的檔案名稱（唯讀）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e\u003ccode\u003e#\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e在這個視窗中上一個編輯的文件的檔案名稱（唯讀）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e\u003ccode\u003e=\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e這個叫做「表達式儲存器」，但是他其實不是一個可寫入的儲存器，下面會專門介紹他\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e你的「滑鼠」反白的文字（其他視窗或是 vim 裡面都可以）\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e\u003ccode\u003e+\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e你的系統剪貼簿\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e\u003ccode\u003e_\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e黑洞儲存器，只進不出，如果你嘗試讀取這個儲存器你什麼都不會得到，這可以用在剪下一段文字但是不影響任何儲存器\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e\u003ccode\u003e/\u003c/code\u003e\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e上次用 \u003ccode\u003e/\u003c/code\u003e 搜的字串\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"表達式儲存器\"\u003e表達式儲存器\u003c/h3\u003e\n\u003cp\u003e這個儲存器很特別，因為他可以執行命令，或是你可以把他當作計算機！\u003c/p\u003e\n\u003ch4 id=\"計算機\"\u003e計算機\u003c/h4\u003e\n\u003cp\u003e當你輸入 \u003ccode\u003e\u0026quot;=10+77\u0026lt;enter\u0026gt;p\u003c/code\u003e 時，vim 會在你的游標後面貼上 \u003ccode\u003e87\u003c/code\u003e，這個就是等於符號 \u003ccode\u003e=\u003c/code\u003e 後面的計算式計算出來的結果\u003cbr\u003e\n你也可以在輸入模式用 \u003ccode\u003e\u0026lt;C-r\u0026gt;=10+77\u0026lt;enter\u0026gt;\u003c/code\u003e （這裡不用打 \u003ccode\u003ep\u003c/code\u003e）\u003cbr\u003e\n我測試過這裡的計算式可以用的和 C/C++ 中差不多，一樣遵守四則運算和括號優先，而且如果整數沒有加上 \u003ccode\u003e.0\u003c/code\u003e 去做除法會得到的是 \u003ccode\u003eint / int\u003c/code\u003e 的結果，除數被除數只要有一方是 float 就可以了，另外他的精度到小數點後六位。\u003c/p\u003e\n\u003ch4 id=\"執行命令\"\u003e執行命令\u003c/h4\u003e\n\u003cp\u003e在等號後面除了接上運算式，你也可以接一個 vim 的「函數」，然後函數的回傳值就會被印到 vim 裡面。\u003cbr\u003e\n這些函數有些是 vim 內建，有些是外掛加進來的。其中有個內建函數 \u003ccode\u003esystem()\u003c/code\u003e，接受一個字串當作參數，回傳這個字串拿去 shell 執行後的輸出。\u003cbr\u003e\n例如我想貼上目前目錄所有的檔案名稱，可以這樣做：在命令模式執行 \u003ccode\u003e\u0026quot;=sysyem('ls -a')\u003c/code\u003e 或是在輸入模式 \u003ccode\u003e\u0026lt;C-r\u0026gt;=sysyem('ls -a')\u003c/code\u003e\u003cbr\u003e\n這樣就會把 \u003ccode\u003els -a\u003c/code\u003e 的結果貼上來了！\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:center\"\u003e\u003cimg src=\"/images/ithelp/pure-CLI-IDE/day21/vim-expression-reg.gif\"\n\t\n\t\n\t\n\tloading=\"lazy\"\n\t\n\t\talt=\"vim expression register\"\n\t\n\t\n\u003e\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:center\"\u003e分別在命令模式和輸入模式示範\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e另外這些函數也可以用 \u003ccode\u003e:call funcion()\u003c/code\u003e 來執行\u003c/p\u003e\n\u003ch1 id=\"結尾\"\u003e結尾\u003c/h1\u003e\n\u003cp\u003evim 的 register 真的非常好用，尤其是基礎的那 36 個儲存器，相較於系統剪貼簿又更豐富了！\u003cbr\u003e\n關於儲存器還有很多細節是我的文章無法詳細列出來的，你可以用命令 \u003ccode\u003e:help :reg\u003c/code\u003e 看看更多儲存器的說明\u003c/p\u003e\n","mediaType": "text/html",
    "published": "2021-09-21T00:00:00+00:00",
    "updated": "2021-09-21T00:00:00+00:00",
    "id": "https://blog.simbafs.cc/p/ithelp/day21/",
    "url": "https://blog.simbafs.cc/p/ithelp/day21/",
    "attributedTo": "https://blog.simbafs.cc"
}