<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on Simba 的喵窩</title><link>https://blog.simbafs.cc/categories/linux/</link><description>Recent content in linux on Simba 的喵窩</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.simbafs.cc/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Dockerfile Collection</title><link>https://blog.simbafs.cc/p/linux/docker/dockerfile-collection/</link><pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/docker/dockerfile-collection/</guid><description>&lt;h1 id="dockerfile-collection">Dockerfile Collection&lt;/h1>
&lt;h2 id="nextjs-with-pnpm">Nextjs with pnpm&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Dockerfile" data-lang="Dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">FROM&lt;/span>&lt;span class="s"> node:20-slim AS base&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENV&lt;/span> &lt;span class="nv">PNPM_HOME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/pnpm&amp;#34;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">ENV&lt;/span> &lt;span class="nv">NODE_ENV&lt;/span>&lt;span class="o">=&lt;/span>production
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">ENV&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$PNPM_HOME&lt;/span>&lt;span class="s2">:&lt;/span>&lt;span class="nv">$PATH&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> corepack enable&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . /app&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">WORKDIR&lt;/span>&lt;span class="s"> /app&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> base AS prod-deps&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> &lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>pnpm,target&lt;span class="o">=&lt;/span>/pnpm/store pnpm install --prod --frozen-lockfile&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> base AS build&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> &lt;span class="nv">id&lt;/span>&lt;span class="o">=&lt;/span>pnpm,target&lt;span class="o">=&lt;/span>/pnpm/store pnpm install --frozen-lockfile &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> pnpm run build&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="c"># RUN pnpm run build&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">FROM&lt;/span>&lt;span class="s"> base&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --from&lt;span class="o">=&lt;/span>prod-deps /app/node_modules /app/node_modules&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> --from&lt;span class="o">=&lt;/span>build /app/.next /app/.next&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">EXPOSE&lt;/span>&lt;span class="s"> 3000&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="s2">&amp;#34;pnpm&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;start&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>modified from &lt;a class="link" href="https://pnpm.io/docker" target="_blank" rel="noopener"
>https://pnpm.io/docker&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Wireshark Over SSH in Docker</title><link>https://blog.simbafs.cc/p/linux/docker/wireshark-over-ssh-in-docker/</link><pubDate>Sun, 09 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/docker/wireshark-over-ssh-in-docker/</guid><description>&lt;h1 id="wireshark-over-ssh-in-docker">Wireshark Over SSH in Docker&lt;/h1>
&lt;p>分成兩個部份，一個是把封包從 docker container 裡面弄出來，再來是在本地的 &lt;a class="link" href="https://zh.wikipedia.org/zh-tw/Wireshark" target="_blank" rel="noopener"
>wireshark&lt;/a> 抓到遠端的封包&lt;/p>
&lt;h2 id="把封包弄出-docker-container">把封包弄出 docker container&lt;/h2>
&lt;p>使用 &lt;a class="link" href="https://github.com/nicolaka/netshoot" target="_blank" rel="noopener"
>nicolaka/netshoot&lt;/a> 這個 docker image，把他跟目標 container 放在同一個 network 下，例如以下會把封包全部丟進 /data/nginx.pcap 這個檔案裡&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;3.6&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">services&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tcpdump&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nicolaka/netshoot&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">depends_on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tcpdump -i eth0 -w /data/nginx.pcap&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">network_mode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">service:nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">$PWD/data:/data&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">nginx&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:alpine&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="m">80&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="本地的-wireshark-抓到遠端的封包">本地的 wireshark 抓到遠端的封包&lt;/h2>
&lt;p>我們有了 /data/nginx.pcap 之後，就可以用 ssh 把檔案印出來，然後吐給 wireshark&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ssh ssh_host &amp;#34;cat path/to/nginx.pcap&amp;#34; | wireshark -k -i -
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="參考資料">參考資料&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://s905060.gitbooks.io/site-reliability-engineer-handbook/content/howto_use_wireshark_over_ssh.html" target="_blank" rel="noopener"
>https://s905060.gitbooks.io/site-reliability-engineer-handbook/content/howto_use_wireshark_over_ssh.html&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/nicolaka/netshoot" target="_blank" rel="noopener"
>https://github.com/nicolaka/netshoot&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Cache Layer</title><link>https://blog.simbafs.cc/p/linux/docker/cache-layer/</link><pubDate>Fri, 07 Jul 2023 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/docker/cache-layer/</guid><description>&lt;h1 id="cache-layer">Cache Layer&lt;/h1>
&lt;p>Dockerfile 中總是有些步驟很耗時間，但是其實每次都在做一樣的事，例如 &lt;code>npm i&lt;/code>、&lt;code>go mod download&lt;/code> 等等，每次其實都下載一樣的檔案。
docker build 在按照 Dockerfile 建構 image 時，每一行都會有 cache layer，最後的 image 就是這一層一層疊起來的。如果之前的 cache layer 都在且這次檔案變動跟之前一樣，那就會直接跳過命令執行，用快取帶替，直接來看例子&lt;/p>
&lt;h2 id="沒有利用快取">沒有利用快取&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">COPY&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go mod download&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go build -o main .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;./main&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>COPY . .&lt;/code> 把所有檔案複製進來，然後 &lt;code>RUN go mod download&lt;/code> 看到，source code 有變動耶！快取不能用，因此重新下載一份相依套件，然後再執行後續動作&lt;/p>
&lt;h2 id="利用快取">利用快取&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span class="line">&lt;span class="cl">&lt;span class="k">COPY&lt;/span> go.mod go.sum ./&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go mod download&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">COPY&lt;/span> . .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">RUN&lt;/span> go build -o main .&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">CMD&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;./main&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>COPY go.mod go.sum ./&lt;/code> 只會把 &lt;code>go.mod&lt;/code> 和 &lt;code>go.sum&lt;/code> 放進來，如果相依性沒有改變的話等於跟之前 &lt;code>docker build&lt;/code> 時條件一樣，因此當 docker 執行到 &lt;code>RUN go mod download&lt;/code> 時就可以直接找之前的 cache layer，跳過下載過程，然後再繼續後面的動作&lt;/p>
&lt;h2 id="加速編譯的原則">加速編譯的原則&lt;/h2>
&lt;p>按照前面利用快取的例子歸納，只要我們把執行越慢、越不常改變的步驟往前移，就可以用之前的 cache layer。而在這裡需要注意的是，&lt;code>COPY&lt;/code> 時只把下一個指令需要的檔案複製進來就好，盡量避免一次複製一整個目錄，這樣有助於減少檔案變動，更好的利用之前的 cache layer。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> +-------------------------------------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1 |Big, slow, infrequently changes layer|
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---+----------------------------+----+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2 | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---+--------------------+---+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3 | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +---+------------+---+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4 |Small, quick|
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +------------+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="其他猜想">其他猜想&lt;/h2>
&lt;p>我沒用過這個東西，所以以下描述只是猜想，可能跟實務上有出入。&lt;br>
因為 docker 的 cache layer 是儲存在本機上，所以我換一台電腦執行 &lt;code>docker build&lt;/code> 就無法用到之前的 cache layer，所以保持在同一臺電腦編譯是最好的，可能這個就是之前看過的 build server？說不定有這個好處。&lt;/p></description></item><item><title>OCR Add PDF Text Layer</title><link>https://blog.simbafs.cc/p/linux/ocr-add-pdf-layer/</link><pubDate>Fri, 19 May 2023 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/ocr-add-pdf-layer/</guid><description>&lt;h1 id="ocr-add-pdf-text-layer">OCR Add PDF Text Layer&lt;/h1>
&lt;p>眾所周知大學課本又厚又重，而且還不便宜，所以這時候如果有電子書就可以很大程度解決這個問題。但是有時候拿到的電子書是掃描的圖片（來源就&amp;hellip;&amp;hellip;咳咳），不能複製、按右鍵翻譯。這時候就可以出動光學字元辨識，幫我們把圖片轉成文字，而且順便把字放在 PDF 的文字圖層上，這樣就可以看著掃描的書，又可以選取到原本不能選取的文字。&lt;/p>
&lt;h2 id="tesseract">tesseract&lt;/h2>
&lt;p>我之前試過幾個線上 OCR，但都是付費功能，但這個東西不是什麼前沿技術，理論上應該不需要太強的電腦效能，於是我就想試著自己跑在我的電腦上。我首先找到的是 &lt;a class="link" href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="noopener"
>https://github.com/tesseract-ocr/tesseract&lt;/a> ，按照他的說明，這套是 1985 年由 HP 開發，之後開源、Google 接手繼續開發的軟體（有夠古老）、支援超過 100 種語言。既然是大公司開發，又過了這麼久（而且看起來上星期還有 commit，就算有 bug 應該也找得到人修），想必應該很不錯。這個透過 &lt;code>apt&lt;/code> 就可以安裝了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">sudo apt install tesseract-ocr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install libtesseract-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不過當我直接把 pdf 丟進去的時候他好像不能直接吃 PDF&lt;/p>
&lt;h2 id="ocrmypdf">OCRmyPDF&lt;/h2>
&lt;p>接著我在搜尋關鍵字加上 &lt;code>pdf&lt;/code>，第一個看起來就是一個很棒的 repo &lt;a class="link" href="https://github.com/ocrmypdf/OCRmyPDF" target="_blank" rel="noopener"
>https://github.com/ocrmypdf/OCRmyPDF&lt;/a> ，有 8.9k 個星星，他號稱可以把 PDF 丟進 OCR 後把結果再塞進 text layer 裡，完美符合需求，而且他是基於 tesseract 這個看起來也超級棒的軟體。這個安裝也是用 &lt;code>apt&lt;/code> 就可以了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">apt install ocrmypdf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>安裝好後給來源路徑、輸出路徑，然後等一會就好了，我用我的力學課本第 12 章做測試，44 頁的文字 46 秒完成，打開後內容幾乎沒錯，超棒！&lt;/p>
&lt;p>等等就把整本課本都丟進去 &amp;gt;&amp;lt;&lt;/p></description></item><item><title>Build Aseprite</title><link>https://blog.simbafs.cc/p/linux/build-aseprite/</link><pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/build-aseprite/</guid><description>&lt;h1 id="build-aseprite">Build Aseprite&lt;/h1>
&lt;p>Aseprite 是一個跨平台的像素畫編輯器，反正看起來很棒，但是官網和 itch.io 買 19.99 美金，steam 賣三百多元，為了省這個錢決定自己編譯，原始碼在 &lt;a class="link" href="https://github.com/aseprite/aseprite" target="_blank" rel="noopener"
>https://github.com/aseprite/aseprite&lt;/a>，而且官方有一個很詳細的&lt;a class="link" href="https://github.com/aseprite/aseprite/blob/main/INSTALL.md" target="_blank" rel="noopener"
>編譯說明&lt;/a>&lt;/p>
&lt;h2 id="clone">clone&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ git clone https://github.com/aseprite/aseprite --recursive --depth 1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="dependencies">Dependencies&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ sudo apt-get install -y g++ clang libc++-dev libc++abi-dev cmake ninja-build libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libfontconfig1-dev
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="skia">skia&lt;/h3>
&lt;p>去 &lt;a class="link" href="https://github.com/aseprite/skia/releases/latest" target="_blank" rel="noopener"
>https://github.com/aseprite/skia/releases/latest&lt;/a> 下載編譯好的 skia，解壓縮放到 &lt;code>~/deps/skia&lt;/code> 下面&lt;/p>
&lt;h2 id="cmake">cmake&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ cd aseprite
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mkdir build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cd build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ export CC=clang
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ export CXX=clang++
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># add by me
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ export CMAKE_CXX_COMPILER=&amp;#34;ccache&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cmake \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -DCMAKE_BUILD_TYPE=RelWithDebInfo \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -DCMAKE_CXX_FLAGS:STRING=-stdlib=libc++ \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -DCMAKE_EXE_LINKER_FLAGS:STRING=-stdlib=libc++ \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -DLAF_BACKEND=skia \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -DSKIA_DIR=$HOME/deps/skia \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -DSKIA_LIBRARY_DIR=$HOME/deps/skia/out/Release-x64 \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -DSKIA_LIBRARY=$HOME/deps/skia/out/Release-x64/libskia.a \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -G Ninja \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ninja aseprite
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="execute-path">Execute Path&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ sudo mv bin /usr/local/share/aseprite
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo ln -s /usr/local/share/aseprite/aseprite /usr/local/bin/aseprite
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="desktop-file">Desktop File&lt;/h3>
&lt;p>&lt;code>~/.local/share/applications/aseprite.desktop&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[Desktop Entry]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Name=Aseprite
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Exec=/usr/local/bin/aseprite
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Icon=/usr/local/share/aseprite/data/icons/ase128.png
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Terminal=false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Type=Application
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Bash Snippet</title><link>https://blog.simbafs.cc/p/linux/bash/snippet/</link><pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/bash/snippet/</guid><description>&lt;h1 id="bash-snippet">Bash Snippet&lt;/h1>
&lt;h2 id="clear-broken-symlinks">Clear broken symlinks&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> $ find . -type l ! -exec test -e {} \; -exec sudo rm {} \;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;a class="link" href="https://unix.stackexchange.com/questions/34248/how-can-i-find-broken-symlinks" target="_blank" rel="noopener"
>stackoverflow&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Git Snippet</title><link>https://blog.simbafs.cc/p/linux/git/git-snippet/</link><pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/git/git-snippet/</guid><description>&lt;h1 id="git-snippet">Git Snippet&lt;/h1>
&lt;h2 id="move-branch-to-another-commit-not-recommand">move branch to another commit (not recommand)&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> git branch --force &amp;lt;branch name&amp;gt; &amp;lt;commit id&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="list-changed-filename">list changed filename&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> git diff --name-only HEAD
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://stackoverflow.com/questions/1552340/how-to-list-only-the-names-of-files-that-changed-between-two-commits" target="_blank" rel="noopener"
>ref: stackoverflow&lt;/a>&lt;/p></description></item><item><title>GPG and Yubikey</title><link>https://blog.simbafs.cc/p/linux/gpg-yubikey/</link><pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/gpg-yubikey/</guid><description>&lt;h1 id="gpg">GPG&lt;/h1>
&lt;p>GPG 是由 由 PGP、OpenPGP 演化而來，屬於 GNU 計畫之一，主要功能是在不安全通道建立安全可信的通訊。為了建立安全可信，需要解決幾個問題：加密明文、驗證發送方、驗證接收方，以及為了解決前面三個問題而產生的新問題：信任。&lt;br>
為了驗證發送方，發送方需要產生只有發送方能產生的簽章併附在內容後面。為了驗證接收方，要把內容用只有接收方才能解開的方式把內容保護起來，這同時可以做到加密明文。&lt;/p>
&lt;p>GPG 中每個人都有一個鑰匙圈（keyring），就像你包包裡的鑰匙圈，GPG 的 keyring 也可以有不只一把金鑰。通常來說會是一把主金鑰和若干把的子金鑰，每一把都是非對稱金鑰對，也就是會有公鑰和私鑰（密鑰）。公鑰是需要公佈給其他人知道的（還要像辦法讓其他人「信任」），而私鑰是必須保護好，後面提到的 Yubikey 就是為了保護我們的私鑰，盡量讓他暴露的風險越低越好。&lt;/p>
&lt;h2 id="主金鑰和子金鑰的關係">主金鑰和子金鑰的關係&lt;/h2>
&lt;p>一組 GPG keyring 中會有一個主金鑰和若干個子金鑰，主金鑰的功能是身份證明和金鑰管理，而子密鑰就是一般的操作。之所以需要有這個設計，是為了盡可能保護主密鑰不洩漏。在日常的 GPG 使用中，我們不可避免需要密鑰（解密、簽章等等），如果全部都使用主密鑰操作，也不是說不行，但是萬一主密鑰洩漏，就要重新產生了。但如果將日常功能移到和主密鑰相關連的子密鑰，主密鑰僅保留重要的「身份證明」功能，如此一來就可以將 &lt;a class="link" href="https://blog.theerrorlog.com/using-gpg-zh.html" target="_blank" rel="noopener"
>主密鑰分離&lt;/a>（這算是高階操作），把不常用到但是非常重要的主金鑰藏好（像是離線儲存，或是最極端的在離線的機器產生、匯出然後刪除）。如果主密鑰洩漏或是遺失，那就要重新產生，等於是一個全新的身份，所有信任關係必須從頭建立。&lt;/p>
&lt;p>因為主金鑰和子金鑰是不同金鑰對，所以如果你用 Alice 子公鑰加密，是不能用 Bella 子密鑰甚至是主密鑰解密的，簽章和證明也是如此。&lt;/p>
&lt;h3 id="如何連結子密鑰和主密鑰">如何連結子密鑰和主密鑰&lt;/h3>
&lt;p>子金鑰和主金鑰是不同的金鑰，甚至可以用不同的演算法產生，那是什麼東西決定他們的地位差異呢？根據我對 &lt;a class="link" href="https://superuser.com/questions/1113308/what-is-the-relationship-between-an-openpgp-key-and-its-subkey" target="_blank" rel="noopener"
>這篇問答&lt;/a> 的理解（很可能是錯的，網路上這方面的資料有夠少），在用主金鑰產生子金鑰的時候，會用主密鑰幫子金鑰「簽章」，這個稱之為「Bellainding Siganture」。GPG 就是用這個 binding signature 去證明子密鑰屬於哪個 keyring。&lt;/p>
&lt;h3 id="什麼操作屬於身份證明certify">什麼操作屬於身份證明(Certify)&lt;/h3>
&lt;p>前面提到，主金鑰的功能是身份證明，但是怎樣的操作是屬於身份證明呢？根據這 &lt;a class="link" href="https://security.stackexchange.com/questions/73679/which-actions-does-the-gnupg-certify-capability-permit" target="_blank" rel="noopener"
>這篇問答&lt;/a> 和 &lt;a class="link" href="https://www.rfc-editor.org/rfc/rfc4880#section-5.2.1" target="_blank" rel="noopener"
>RFC 4880&lt;/a>，以下操作都是屬於身份證明&lt;/p>
&lt;ul>
&lt;li>對某個使用者的公鑰簽章（信任某個使用者，相關內容在信任網章節）&lt;/li>
&lt;li>簽發 binding signature（這裡分成 subkey binding signature 和 primary binding signature，但我還沒研究出差別）&lt;/li>
&lt;li>簽發金鑰撤銷金鑰（當你的子密鑰洩漏時宣告用）&lt;/li>
&lt;/ul>
&lt;p>簡單來說，就是產生、撤銷子金鑰以及和「信任」有關的操作都算是「身份證明」(Certify)&lt;/p>
&lt;h2 id="usage-flag">Usage Flag&lt;/h2>
&lt;p>每對金鑰其實都有簽章、加密、驗證等等功能（可能會依使用的演算法不同而受限，像是 DSAlice 只能簽章），為了清楚的切分不同密鑰的功能，GPG 採用的方法是 Usage Flag，他會標注一個金鑰的用途是「&lt;strong>C&lt;/strong>ertify 身份證明」、「&lt;strong>S&lt;/strong>ign 簽章」、「&lt;strong>E&lt;/strong>ncrypt 加解密」、「&lt;strong>Alice&lt;/strong>uthenticate 認證」。如果你在產生金鑰時加上 &lt;code>--expert&lt;/code> 專家選項，你會在選擇演算法的列表看到某些選項後面帶著 &lt;code>(set your own capabilities)&lt;/code>，選這些可以讓你決定產生的金鑰有哪些 Usage Flag，不然就會使用預設的。&lt;/p>
&lt;p>其中在上一個小節提到的 Certify 功能必須&lt;strong>且只能&lt;/strong>（應該吧，我是找不到怎麼在子密鑰上加 Certify）設定在主密鑰上。另外 Certify 和 Aliceuthenticate 的中文翻譯都很像，但是功能卻大大不同，Certify 剛剛上面提過，就是「信任」，Aliceuthenticate 則是像是 ssh 登入的操作（下面會提到）&lt;/p>
&lt;h2 id="uid">uid&lt;/h2>
&lt;p>每個 keyring 都對應到一個人，但通常一個人有不只一個的 email address，因此 GPG 也支援對應多個 email address，這個在 GPG 終就稱之為 uid，裡面會包含這個人的名字和 email address&lt;/p>
&lt;h2 id="key-fingerprintid-and-keygrip">key fingerprint(id) and keygrip&lt;/h2>
&lt;p>fingerprint 和 keygrip 都是要對於金鑰對識別，他們都是把要識別的公鑰對拿去 hash，功能是可以快速比較兩把 key 是否相同，例如你從網路上找到某個人的公鑰，可以用 fingerprint 和那個人比對是不是同一把 key（fingerprint 40 個字元，完整的 key 可能有上千個字元）。看到這裡你會覺得 fingerprint 和 keygrip 很像，的確，他們的差異只差在包含的資訊不一樣&lt;/p>
&lt;ul>
&lt;li>fingerprint
&lt;ul>
&lt;li>公鑰&lt;/li>
&lt;li>建立日期&lt;/li>
&lt;li>演算法&lt;/li>
&lt;li>公鑰 packet 版本（儲存公鑰的資料結構）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>keygrip
&lt;ul>
&lt;li>公鑰&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>你會發現，keygrip 只包含公鑰，而 fingerprint 則是包含了一堆 gpg 內部資訊，因此我們可以說 keygrip 是「和 GPG 無關」的識別。&lt;/p>
&lt;p>雖然兩者都能識別主金鑰和子金鑰，但是在我自己的使用中，通常 fingerprint 會用來識別主金鑰（整個 keyring），keygrip 會拿來特別指定要用哪一個子金鑰。&lt;/p>
&lt;h2 id="信任網">信任網&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>Information&lt;/strong>
接下來的「公鑰」通常是指 &amp;ldquo;public key packet&amp;rdquo;，也就是指令 &lt;code>gpg --export&lt;/code> 預設會吐出來的東西，裡面包含主公鑰、子公鑰們、uid 資訊以及別人對這個公鑰的簽章等等&lt;/p>
&lt;/blockquote>
&lt;p>現在想像一個情境，Alice 要加密一段訊息傳給 Bella，所以他需要去找到 Bella 的公鑰，Alice 上網找到一個公鑰的 uid 是 &lt;code>Bella &amp;lt;b@exmaple.com&amp;gt;&lt;/code>，於是他就用這份公鑰加密訊息後傳給 Bella，但是這份公鑰其實是 C 偽裝的，那這樣祕密訊息就會被 C 知道。&lt;/p>
&lt;p>為了解決這個問題，Alice 拿到公鑰後要開始傳訊息之前，需要先用一個可信的通道和 Bella 確認公鑰是否正確（當面比對 fingerprint 之類的），接者 Alice 用他的主密鑰幫 Bella 的公鑰簽章（Alice sign Bella&amp;rsquo;s key），做出宣告「Alice 認為這把公鑰有效（來源和上面記載的是一致的，都是 Bella」（this key is validated）。這時候 Bella 也跟 Charlie 確認過公鑰並簽章（Bella sign Charlie&amp;rsquo;s key），如果 Alice 「完整」信任 Bella 會認真確認公鑰真實性才簽章，那他就可以拿 Bella 的公鑰去驗證 Bella 真的簽章過 Charlie 的公鑰，那麼 Alice 可以根據這個結果相信 Charlie 的公鑰是真的，不用親自去找 Charlie 確認。&lt;/p>
&lt;blockquote>
&lt;p>「相信公鑰有效（真實性）」和「信任簽章公鑰的人」在 GPG 裡面都是 &amp;ldquo;trust&amp;rdquo; ，有點容易搞混，但中文還是可以稍微區分開來的&lt;/p>
&lt;/blockquote>
&lt;p>對於公鑰簽章簽發者的信任層級可以分成以下五個&lt;/p>
&lt;ol>
&lt;li>不知道&lt;/li>
&lt;li>不信任&lt;/li>
&lt;li>半信半疑&lt;/li>
&lt;li>完整信任&lt;/li>
&lt;li>終極信任&lt;/li>
&lt;/ol>
&lt;p>其中終極信任因為比較特別就先不談，在上面 Alice、Bella 和 Charlie 的例子裡，如果 Alice 沒有「完整信任」Bella，只有「半信半疑」，那麼 Charlie 的公鑰就不會被認為是有效的&lt;/p>
&lt;p>目前為止的機制，我們要確認公鑰有效需要整條信任鍊之間都是「完整信任」且都被前一個確認是有效，但是這樣缺乏彈性。GPG 採用一個巧妙的方法來擴展目前的機制，一把公鑰如果滿足以下條件，就會被認定是有效的：&lt;/p>
&lt;ol>
&lt;li>被足夠多的有效的人（公鑰是有效的）簽章，這意味下面條件至少要滿足一個
&lt;ol>
&lt;li>你親自對他簽章&lt;/li>
&lt;li>被一個「完整信任」的人簽章&lt;/li>
&lt;li>被三個「半信半疑」的人簽章&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>從自己出發到那把公鑰的最短路徑小於等於五步&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>在實際使用時需要幾個半信半疑的人以及路徑長度限制都是可以調整的，這裡寫的是 GPG 預設的值&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;blockquote>
&lt;p>&lt;strong>Danger&lt;/strong>&lt;br>
以下內容待驗證&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> +-----&amp;gt;Bella--------+
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Alice--+ +--&amp;gt;Daniel-----&amp;gt;Edson------&amp;gt;Galen
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | | |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +-&amp;gt;Charlie---+ |
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> | v
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +--&amp;gt;Frank
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>把公鑰簽署關係畫成圖&lt;br>
&lt;code>$ gpg --no-options --with-colons --fixed-list-mode --list-sigs | sig2dot -a -u &amp;quot;[User ID not found]&amp;quot; &amp;gt; myLUG.dot ; neato -Tpng myLUG.dot &amp;gt; myLUG.png ; open myLUG.png&lt;/code>&lt;br>
&lt;a class="link" href="https://github.com/bmarwell/sig2dot2" target="_blank" rel="noopener"
>https://github.com/bmarwell/sig2dot2&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>舉例來說，上圖以 Alice 為中心到 Galen 等六個人的信任關係，箭頭 &lt;code>A---&amp;gt;B&lt;/code> 代表 A 為 B 的公鑰簽章，在以下的例子，我們調整為只需要兩個半信半疑的有效公鑰信任就可以信任為有效公鑰，但路徑不能超過三。&lt;/p>
&lt;p>下表是基於這個信任網 Alice 對其他人的信任層級和推導出來的公鑰有效性結果。&lt;br>
舉例來說，第一個情況是雖然 Alice 確認了 Bella 和 Charlie 的公鑰有效性，但是他只相信 Charlie ，根據這個可以推導出來 Daniel, Edson, Frank 三人的公鑰都是有效的，因為 Alice 對 Charlie 是完整信任，因此 Charlie 確認過的公鑰對於 Alice 都是有效的。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">情境&lt;/th>
&lt;th style="text-align:left">半信半疑&lt;/th>
&lt;th style="text-align:left">完整信任&lt;/th>
&lt;th style="text-align:left">一半有效&lt;/th>
&lt;th style="text-align:left">完整有效&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">Charlie&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">Bella, Charlie, Daniel, Frank&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:left">Bella, Chalir&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">Feank&lt;/td>
&lt;td style="text-align:left">Bella, Charlie, Daniel&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:left">Charlie, Daniel&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">Daniel, Frank&lt;/td>
&lt;td style="text-align:left">Bella, Charlie&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:left">Charlie, Daniel, Bella&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">Edson&lt;/td>
&lt;td style="text-align:left">Bella, Charlie, Frank&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">5&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">Bella, Daniel, Edson&lt;/td>
&lt;td style="text-align:left">&lt;/td>
&lt;td style="text-align:left">Bella, Daniel, Edson, Frank&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>需要實驗驗證&lt;/p>
&lt;/blockquote>
&lt;p>根據我的理解，首先是自己簽的公鑰一定是有效的，再來是完整相信的人簽的也是有效，再來是夠多的半信半疑的人都簽章的公鑰也有效，最後你會發現，能夠延伸到最遠的有效公鑰是信任的人的外圍一圈不超過長度限制的地方。&lt;/p>
&lt;hr>
&lt;p>信任網要解決的不是技術問題，是社交問題，就算今天 GPG 的設計改成有一個權威的驗證中心去發布每一把公鑰，還是會遇到一個問題，我憑什麼相信這個驗證中心？因此 GPG 採用的信任網可以讓我們從真實世界會接觸的人開始建立信任網，再漸漸地把信任網擴張，這時我們不是因為「這是權威」而信任一把公鑰而是因為我們做出足夠的判斷才決定一把未知公鑰是否可信。&lt;/p>
&lt;blockquote>
&lt;p>這一小節參考 GPG 官方的教學文章 &lt;a class="link" href="https://www.gnupg.org/gph/en/manual/x334.html" target="_blank" rel="noopener"
>https://www.gnupg.org/gph/en/manual/x334.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="範例">範例&lt;/h2>
&lt;h3 id="產生金鑰對">產生金鑰對&lt;/h3>
&lt;h3 id="gpg-with-ssh">GPG with SSH&lt;/h3>
&lt;h3 id="簽章公鑰">簽章公鑰&lt;/h3>
&lt;h2 id="發佈公鑰">發佈公鑰&lt;/h2>
&lt;h1 id="yubikey">Yubikey&lt;/h1></description></item><item><title>GPG with SSH</title><link>https://blog.simbafs.cc/p/linux/gpg-with-ssh/</link><pubDate>Tue, 06 Dec 2022 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/gpg-with-ssh/</guid><description>&lt;h1 id="gpg-with-ssh">GPG with SSH&lt;/h1>
&lt;p>接續前一篇 &lt;a class="link" href="https://blog.simbafs.cc/posts/linux/gpg/" >gpg 的文章&lt;/a>&lt;/p>
&lt;h2 id="指紋-fingerprint">指紋 Fingerprint&lt;/h2>
&lt;p>根據 &lt;a class="link" href="https://help.gnome.org/users/seahorse/stable/misc-key-fingerprint.html.en" target="_blank" rel="noopener"
>GNOME help&lt;/a> 的說明，不同金鑰的指紋必然不同，因此如果要驗證、查詢的話，與其用其他參數，不如用指紋，例如我的 GPG key 指紋是 &lt;code>6236 A070 8FCD 894C 7AD1 A5FC DB13 A5C2 042E AEA4&lt;/code>，看到這串就代表是我。&lt;/p>
&lt;h2 id="grip">Grip&lt;/h2>
&lt;p>根據 &lt;a class="link" href="https://lists.gnupg.org/pipermail/gcrypt-devel/2013-June/002205.html" target="_blank" rel="noopener"
>gnupg 的這封郵件&lt;/a>，grip 似乎是金鑰參數的 SHA-1 hash，看不太懂哪些參數會被納入計算。&lt;/p>
&lt;h2 id="ssh-authorize-with-gpg">ssh authorize with gpg&lt;/h2>
&lt;p>以下步驟來自下面三個參考網址&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://blog.theerrorlog.com/using-gpg-zh.html" target="_blank" rel="noopener"
>https://blog.theerrorlog.com/using-gpg-zh.html&lt;/a> (這裡有一些關於 gpg 的設定操做，不一定要像他說的那樣主密鑰分離，只是給一個操作說明)&lt;/li>
&lt;li>&lt;a class="link" href="https://blog.theerrorlog.com/using-gpg-keys-for-ssh-authentication-zh.html" target="_blank" rel="noopener"
>https://blog.theerrorlog.com/using-gpg-keys-for-ssh-authentication-zh.html&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://gist.github.com/mcattarinussi/834fc4b641ff4572018d0c665e5a94d3" target="_blank" rel="noopener"
>https://gist.github.com/mcattarinussi/834fc4b641ff4572018d0c665e5a94d3&lt;/a> (gpg-agent 設定看這篇，這前面有非常詳細的 gpg ket 設定教學)&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>根據第二個參考資料的說明產生可以用於 ssh 驗證的 gpg subkey（有&lt;code>[A]&lt;/code>）&lt;/li>
&lt;li>取得 ssh 格式的公鑰 &lt;code>gpg2 --export-ssh-key you@example.com&lt;/code>&lt;/li>
&lt;li>取得要用於驗證的 subkey 的 keygrip&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ gpg2 --list-keys --with-keygrip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/home/you/.gnupg/pubring.kbx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">------------------------------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pub rsa4096 2022-12-06 [C]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Keygrip = BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">uid [ultimate] you &amp;lt;you@example.com&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sub rsa4096 2022-12-06 [S]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Keygrip = CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sub rsa4096 2022-12-06 [E]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Keygrip = DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sub ed25519 2022-12-06 [A] &amp;lt;- 可用於驗證的子金鑰
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Keygrip = EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE &amp;lt;- 我們要的 keygrip
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>將 keygrip 寫入 &lt;code>.gnupg/sshcontrol&lt;/code> -&amp;gt; &lt;code>echo EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE &amp;gt;&amp;gt; .gnupg/sshcontrol&lt;/code>&lt;/li>
&lt;li>根據第三個參考網址 &lt;a class="link" href="https://gist.github.com/mcattarinussi/834fc4b641ff4572018d0c665e5a94d3#setup-the-gpg-agent-for-ssh-authentication" target="_blank" rel="noopener"
>setup-the-gpg-agent-for-ssh-authentication&lt;/a> 章節設定 gpg-agent&lt;/li>
&lt;/ol>
&lt;p>這時後重新開啟終端機就可以用 gpg 取代原本的 ssh key 了，確認移除 ssh key 真的還可以登入後就可以把舊的 ssh key 收起來了。&lt;/p></description></item><item><title>Mastodon</title><link>https://blog.simbafs.cc/p/linux/mastodon/</link><pubDate>Thu, 24 Nov 2022 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/mastodon/</guid><description>&lt;h1 id="mastodon">Mastodon&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[452093fc-5a92-47e2-b97b-dad3dff424e7] method=PUT path=/settings/profile format=html controller=Settings::ProfilesController action=update status=500 error=&amp;#39;Errno::EACCES: Permission denied @ dir_s_mkdir - /opt/mastodon/public/system/accounts&amp;#39; duration=1077.81 view=0.00 db=6.70
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[452093fc-5a92-47e2-b97b-dad3dff424e7]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[452093fc-5a92-47e2-b97b-dad3dff424e7] Errno::EACCES (Permission denied @ dir_s_mkdir - /opt/mastodon/public/system/accounts):
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[452093fc-5a92-47e2-b97b-dad3dff424e7]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;a class="link" href="https://github.com/mastodon/mastodon/issues/3676#issuecomment-307500074" target="_blank" rel="noopener"
>https://github.com/mastodon/mastodon/issues/3676#issuecomment-307500074&lt;/a>&lt;/p></description></item><item><title>Merge Two Repo</title><link>https://blog.simbafs.cc/p/linux/git/merge-two-repo/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/git/merge-two-repo/</guid><description>&lt;h1 id="merge-two-repo">Merge Two Repo&lt;/h1>
&lt;p>這學期修了幾個資工系的課，都需要寫程式作業，原本我是一個作業開一個 repo，但是我發現這樣好像會開超級多 repo，於是我決定要想辦法合併他們。&lt;/p>
&lt;h2 id="找資料">找資料&lt;/h2>
&lt;p>首先去 Google 搜尋「git merge two repo」，第一條結果是是一個 13 年前的 stack overflow &lt;a class="link" href="https://stackoverflow.com/questions/1425892/how-do-you-merge-two-git-repositories" target="_blank" rel="noopener"
>https://stackoverflow.com/questions/1425892/how-do-you-merge-two-git-repositories&lt;/a>，裡面第一個回答提到的方法是把待合併 repo A 指到目標 repo B 的 branch A，然後就把 branch A 當作一般分支合併，但是要加上 &lt;code>--allow-unrelated-histories&lt;/code> 選項&lt;/p>
&lt;h2 id="filter-repo">filter-repo&lt;/h2>
&lt;p>現在有個問題，原本的目錄結構是長這樣&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── HW1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── .git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── go.mod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── main.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── HW2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── .git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── go.mod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── main.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── HW3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── .git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── go.mod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果直接合併會變成這樣&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── .git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── go.mod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因為檔名一樣，就被合併了，但是我想要的是這樣&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── .git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── HW1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── go.mod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── main.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">├── HW2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ ├── go.mod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └── main.go
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└── HW3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ├── go.mod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> └── main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>當然可以把檔案移好再合併，但是這樣提交紀錄（commit history）上不好看，所以我們需要其他工具&lt;/p>
&lt;h2 id="git-filter-repo">git filter-repo&lt;/h2>
&lt;p>[git-filter-repo] 是個可以批次處理提交紀錄的工具，例如我們這次要的，將全部檔案移到子目錄裡面，從第一個 commit 開始。看網路教 git 似乎內建 &lt;code>filter-branch&lt;/code> 命令，但 filter-repo 的效能和功能都比較多。&lt;/p>
&lt;h3 id="安裝">安裝&lt;/h3>
&lt;p>&lt;code>apt install git-filter-repo&lt;/code>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/newren/git-filter-repo/blob/main/INSTALL.md" target="_blank" rel="noopener"
>https://github.com/newren/git-filter-repo/blob/main/INSTALL.md&lt;/a>&lt;/p>
&lt;h3 id="使用">使用&lt;/h3>
&lt;p>&lt;code>git filter-repo&lt;/code>&lt;/p>
&lt;h3 id="移動檔案到子目錄">移動檔案到子目錄&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ git filter-repo --to-subdirectory-filter hw1 --force
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Parsed 11 commits
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">New history written in 0.03 seconds; now repacking/cleaning...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Repacking your repo and cleaning out old unneeded objects
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">HEAD is now at 57fd6a0 update example
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enumerating objects: 52, done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Counting objects: 100% (52/52), done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Delta compression using up to 8 threads
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Compressing objects: 100% (21/21), done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Writing objects: 100% (52/52), done.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Total 52 (delta 17), reused 30 (delta 17), pack-reused 0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Completely finished after 0.08 seconds.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="合併-repo">合併 Repo&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ cd A
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git remote add -f a ../a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git merge --allow-unrelated-histories a/main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git remote remove a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>合併完的提交紀錄長這樣（還沒移除 remote ）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">* 097b986 (HEAD -&amp;gt; main) Merge remote-tracking branch &amp;#39;hw4/multithread&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * 2d0bc2d (hw4/multithread) finish
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * 462ec18 try to use goroutine
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * 89915f1 Merge branch &amp;#39;main&amp;#39; into multithread
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * | b4e5879 README.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * | 96b5d3a try to use goroutine to speed up, but failed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">* | | ebb41bb Merge remote-tracking branch &amp;#39;hw4/main&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|\ \ \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| | |/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |/|
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * | faabcb5 (hw4/main) finish
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * | f715b3c index++
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * | 1c16b06 README.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| |/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * a0594d2 finish first version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * 475fa62 finish dec/enc functions
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * 69cfeb3 Initial commit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">* 9f10a17 Merge remote-tracking branch &amp;#39;hw2/main&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * f6d6ffe (hw2/main) out.pdf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * a07ee96 README.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * c22c4aa finish version 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * acebb48 basic concept
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * 9b3c351 init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * d949263 Initial commit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">* 1e6a89d Merge remote-tracking branch &amp;#39;hw1/main&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">|\
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * 57fd6a0 (hw1/main) update example
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * 016ed74 add tex
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * 0c5cf72 finish out.pdf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * 24a2474 fix a little bug
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * 9b9bdce README.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * 1aa184e remove unused code and add comments
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * 47ca969 finish first version
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * 9f30ca4 README.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * 683c59b WIP, not tested
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * 48bcefd README.md
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">| * b7603e8 Initial commit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">* cdca739 (origin/main, origin/HEAD) Initial commit
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="參考資料">參考資料&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://stackoverflow.com/questions/1425892/how-do-you-merge-two-git-repositories" target="_blank" rel="noopener"
>https://stackoverflow.com/questions/1425892/how-do-you-merge-two-git-repositories&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://gist.github.com/x-yuri/6161d90d1af8ebac6e560bcef548c1c3" target="_blank" rel="noopener"
>https://gist.github.com/x-yuri/6161d90d1af8ebac6e560bcef548c1c3&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/newren/git-filter-repo" target="_blank" rel="noopener"
>https://github.com/newren/git-filter-repo&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Openssl DES</title><link>https://blog.simbafs.cc/p/linux/openssl-des/</link><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/openssl-des/</guid><description>&lt;h1 id="openssl-des">openssl DES&lt;/h1>
&lt;h2 id="加密">加密&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">openssl enc -des-cbc -a -K e0e0e0e0f1f1f1f1 -in plaintext.txt -provider legacy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-des-cbc: 指定演算法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-a: 使用 base64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-K: 指定密碼
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-provider legacy: 因為 DES 太古老，不安全，因此要加上這個選項才能用
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="解密">解密&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">openssl enc -des-cbc -d -a -K e0e0e0e0f1f1f1f1 -in plaintext.txt -provider legacy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">-des-cbc: 指定演算法
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-d: 解密
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-a: 使用 base64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-K: 指定密碼
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-provider legacy: 因為 DES 太古老，不安全，因此要加上這個選項才能用
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="注意事項">注意事項&lt;/h2>
&lt;p>openssl 的選項都是一個 &lt;code>-&lt;/code>，不像一般的 GNU 命令分長選項和短選項。另外 &lt;code>-d&lt;/code> 和 &lt;code>-a&lt;/code> 不能合併成 &lt;code>-da&lt;/code> 或是 &lt;code>-ad&lt;/code>&lt;/p>
&lt;h2 id="參考資料">參考資料&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://wiki.openssl.org/index.php/Enc" target="_blank" rel="noopener"
>https://wiki.openssl.org/index.php/Enc&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/openssl/openssl/issues/12906" target="_blank" rel="noopener"
>https://github.com/openssl/openssl/issues/12906&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Solarized</title><link>https://blog.simbafs.cc/p/linux/vim/solarized/</link><pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/vim/solarized/</guid><description>&lt;h1 id="solarized">Solarized&lt;/h1>
&lt;p>&lt;a class="link" href="https://ethanschoonover.com/solarized/" target="_blank" rel="noopener"
>solarized&lt;/a> 是一個文字界面常見的配色方案，不僅是用在 vim，大多數 terminal 和 editor 也都支援&lt;/p>
&lt;h2 id="install">install&lt;/h2>
&lt;p>加入 ```vim
Plug &amp;rsquo;ericbn/vim-solarized'&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">然後安裝
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">## transparent background
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">因為設定關係，所以如果你的終端機有設定透明背景，在 vim 中會全部變不透明，載入[這個設定](https://gist.github.com/fuadnafiz98/d91e468c9bc4689868eb0984a29fef66)就可以解決，你也可以放在另外檔案再引入
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">```vim
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34; https://gist.github.com/fuadnafiz98/d91e468c9bc4689868eb0984a29fef66
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34; for transparent background
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">function! AdaptColorscheme()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> highlight clear CursorLine
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> highlight Normal ctermbg=none
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> highlight LineNr ctermbg=none
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> highlight Folded ctermbg=none
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> highlight NonText ctermbg=none
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> highlight SpecialKey ctermbg=none
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> highlight VertSplit ctermbg=none
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> highlight SignColumn ctermbg=none
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">endfunction
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">autocmd ColorScheme * call AdaptColorscheme()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">highlight Normal guibg=NONE ctermbg=NONE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">highlight CursorColumn cterm=NONE ctermbg=NONE ctermfg=NONE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">highlight CursorLine cterm=NONE ctermbg=NONE ctermfg=NONE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">highlight CursorLineNr cterm=NONE ctermbg=NONE ctermfg=NONE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">highlight clear LineNr
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">highlight clear SignColumn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">highlight clear StatusLine
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34; Change Color when entering Insert Mode
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">autocmd InsertEnter * set nocursorline
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34; Revert Color to default when leaving Insert Mode
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">autocmd InsertLeave * set nocursorline
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;&amp;#34; extra settings, uncomment them if necessary :)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;set cursorline
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;set noshowmode
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;set nocursorline
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34; trasparent end
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Yubikey</title><link>https://blog.simbafs.cc/p/linux/yubikey/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/yubikey/</guid><description>&lt;h1 id="yubikey">Yubikey&lt;/h1>
&lt;p>感謝煥杰賣我一個 1200，撿到寶啦！我買的是 &lt;a class="link" href="https://www.yubico.com/tw/product/yubikey-5c-nfc/" target="_blank" rel="noopener"
>Yubikey 5C NFC&lt;/a>，看起來幾乎所有功能都有&lt;/p>
&lt;h2 id="login">login&lt;/h2>
&lt;p>如果開啟這個，登入、解除鎖定等等動作都需要 Yubikey，聽起還很安全，但是因為我的筆電只有一個 type C，所以必須把 USB hub 拔掉，挺麻煩，我就把他關掉了。&lt;br>
在密碼輸入框的地方，先插入 yubikey，輸入密碼、按 enter，然後轉圈圈的時候按 yubikey 上金色按鈕（這個似乎是指紋辨識），就可以登入了。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://oscfr.com/blog/tech/yubico-yubikey-5c-nfc-setup-on-ubuntu-2104/" target="_blank" rel="noopener"
>Yubico Yubikey 5C NFC setup on Ubuntu 21.04&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="ssh-gpg">ssh gpg&lt;/h2>
&lt;p>&lt;del>研究中&amp;hellip;&lt;/del>
在這裡 &lt;a class="link" href="https://blog.simbafs.cc/posts/linux/gpg-with-ssh" >GPG with SSH&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://medium.com/@SSWilsonKao/%E5%A6%82%E4%BD%95%E5%9C%A8-mac-%E4%B8%8A-%E6%8A%8A-yubikey-%E8%88%87-gpg-ssh-%E6%90%AD%E9%85%8D%E5%9C%A8%E4%B8%80%E8%B5%B7-5f842d20ad6a" target="_blank" rel="noopener"
>如何在 Mac 上，把 YubiKey 與 GPG、SSH 搭配在一起&lt;/a> &amp;gt; &lt;a class="link" href="https://gist.github.com/artizirk/d09ce3570021b0f65469cb450bee5e29" target="_blank" rel="noopener"
>OpenPGP SSH access with Yubikey and GnuPG&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="2fa">2FA&lt;/h2>
&lt;p>按照各個網站的說明設定，下面是我找到可以設定 Yubikey 的網站/APP&lt;/p>
&lt;ul>
&lt;li>Google（我買這個 yubikey 最主要目的）&lt;/li>
&lt;li>Github&lt;/li>
&lt;li>twitter&lt;/li>
&lt;li>facebook&lt;/li>
&lt;li>heroku&lt;/li>
&lt;/ul>
&lt;p>twitter 在手機登入好像怪怪的，試了 5 分鐘才成功登入了&lt;/p>
&lt;hr>
&lt;h2 id="20221207-更">2022/12/07 更&lt;/h2>
&lt;p>過了一陣子，系統也重裝過，然後 yubikey 就讀不到了，但是平常用網站都可以，只是 CLI 和 Yubikey personalization tool 都讀不到。
插上後輸入以下指令都會失敗&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ ykpersonalize
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Yubikey core error: no yubikey present
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ykman list --serials
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WARNING: PC/SC not available. Smart card (CCID) protocols will not function.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ERROR: Unable to list devices for connection
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">15421961
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是用 &lt;code>lsusb&lt;/code> 看起來卻很正常&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ lsusb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Bus 001 Device 010: ID 1050:0406 Yubico.com Yubikey 4/5 U2F+CCID
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>目前根據 &lt;a class="link" href="https://github.com/Yubico/yubioath-flutter/issues/786#issuecomment-1063656957" target="_blank" rel="noopener"
>這個 GitHub Issue 的回覆&lt;/a>，輸入 &lt;code>sudo systemctl start pcscd&lt;/code> 後，變成這樣&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ ykman list --serials
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">15421961
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>我剛剛發現，輸入指令 &lt;code>ykman info&lt;/code> (yubikey manager) 竟然有回應，也找得到&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ ykman info
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Device type: YubiKey 5C NFC
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Serial number: 15421961
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Firmware version: 5.2.7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Form factor: Keychain (USB-C)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enabled USB interfaces: FIDO, CCID
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NFC transport is enabled.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Applications USB NFC
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OTP Disabled Enabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FIDO U2F Enabled Enabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">FIDO2 Enabled Enabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OATH Enabled Enabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">PIV Enabled Enabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OpenPGP Enabled Enabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">YubiHSM Auth Not available Not available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>但是 ykpersonalize 還是找不到我的 yubikey，後來我直接跳過這步，說不定現在 gpg 已經可以讀到了，所以我直接執行 &lt;code>gpg --edit-card&lt;/code>，結果他說&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">gpg: error getting version from &amp;#39;scdaemon&amp;#39;: No SmartCard daemon
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gpg: OpenPGP card not available: No SmartCard daemon
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>根據 &lt;a class="link" href="https://www.reddit.com/r/yubikey/comments/lbl4nn/having_some_trouble_with_gpg_and_yubikey/" target="_blank" rel="noopener"
>這篇 reddit&lt;/a>，是少了套件 &lt;code>scdaemon&lt;/code>，用 apt 裝了之後 gpg 的回應看起來就正常多了&lt;/p>
&lt;p>然後就跟著 [官方 blog 的說明](&lt;a class="link" href="https://support.yubico.com/hc/en-us/articles/360013790259-Using-Your-YubiKey-with-OpenPGP#Generating_Keys_externally_from_the_YubiKey_%28Recommended%29ui6vup%29" target="_blank" rel="noopener"
>https://support.yubico.com/hc/en-us/articles/360013790259-Using-Your-YubiKey-with-OpenPGP#Generating_Keys_externally_from_the_YubiKey_(Recommended%29ui6vup)&lt;/a> 把主密鑰（？好像是簽章用子密鑰）移到 yubikey 上了&lt;/p>
&lt;p>接下來我亂七八糟試了一堆東西，發現 &lt;a class="link" href="https://developer.okta.com/blog/2021/07/07/developers-guide-to-gpg" target="_blank" rel="noopener"
>一篇文章&lt;/a> 把上面的東西幾乎都包括進去了，非常推薦可以去看看。&lt;/p>
&lt;p>剛剛搞了一陣後，把簽章、加密、驗證和主金鑰（應該有）的密鑰通通丟上 yubikey 了。但是現在有個問題，所有需要 gpg key 的時候，像是簽 git commit 和 ssh 驗證都需要插上 yubikey，好像安全過頭了。我研究看看能不能把某些再拉回本地，如果不行的話就只能把一開始備份的密鑰再導入一次，暴力解決！&lt;/p>
&lt;h2 id="密碼們">密碼們&lt;/h2>
&lt;p>yubikey 的設定中有好幾份不同功能的密碼，用法和出現時機都不一樣，這邊是我研究好幾份文件的總整理。首先要先有個關念，yubikey 的設計是公司裡有個人專門管一大堆的 yubikey，所以會有一個密碼是只有管理人知道，使用者不知道。那為了驗證是使用者本人，也會有密碼是只有使用者知道但是其他人不知道。&lt;/p>
&lt;h2 id="pin">PIN&lt;/h2>
&lt;p>這個 &amp;ldquo;PIN&amp;rdquo; 是 &lt;strong>&amp;ldquo;Personal Identification Number&amp;rdquo;&lt;/strong> 的縮寫，顧名思義，這個就是只有使用者知道但是其他人不知道的 PIN，你會在動用 gpg、ssh 密鑰時用到他。預設是 123456&lt;/p>
&lt;h3 id="使用情境">使用情境&lt;/h3>
&lt;ul>
&lt;li>驗證 PIN&lt;/li>
&lt;li>改變 PIN&lt;/li>
&lt;li>改變嘗試次數限制（還需要 management key）&lt;/li>
&lt;li>簽章&lt;/li>
&lt;li>解密&lt;/li>
&lt;li>key agreement&lt;/li>
&lt;li>取得資料&lt;/li>
&lt;/ul>
&lt;h2 id="puk">PUK&lt;/h2>
&lt;p>&amp;ldquo;PUK&amp;rdquo; 是 &amp;ldquo;PIN Unblocking Key&amp;rdquo; 的縮寫，他的功能是當你輸入錯誤的 PIN 太多次時，用這個密碼解鎖。如果很不幸的你 PUK 也輸入錯誤太多次，整個 yubikey 會被鎖起來，所有的功能都不能用，根據 &lt;a class="link" href="https://support.yubico.com/hc/en-us/articles/360015654100-YubiKey-PIN-and-PUK-User-Management-on-Windows" target="_blank" rel="noopener"
>官方文件&lt;/a>，你只能回復出廠設定&lt;/p>
&lt;blockquote>
&lt;p>By default, the user PIN is blocked when three consecutive incorrect PINs have been entered. The PIN Unblock Code (PUK) is used for unblocking the User PIN. If both the PIN and the PUK are blocked, the YubiKey must be reset, which deletes any loaded certificates and returns the YubiKey to a factory default state.&lt;/p>
&lt;/blockquote>
&lt;h3 id="使用情境-1">使用情境&lt;/h3>
&lt;ul>
&lt;li>修改 PUK&lt;/li>
&lt;li>解鎖 PIN&lt;/li>
&lt;/ul>
&lt;h2 id="admin-pin">Admin PIN&lt;/h2>
&lt;p>很明顯這是管理員專用的密碼，反正在需要比較高權限的操作的時候他會跳出來，密碼輸入框上面會寫 &amp;ldquo;Admin PIN&amp;rdquo;，所以應該是不太會看錯啦。預設是 12345678&lt;br>
&lt;code>gpg --edit-card&lt;/code> 在 &lt;code>passwd&lt;/code> 裡修改 Admin PIN 後的訊息會是 &lt;code>PIN changed.&lt;/code>，應該是誤植吧&lt;/p>
&lt;h2 id="management-key">management key&lt;/h2>
&lt;p>這是一個比較特別的密碼，他預設是 3DES，你也可以改成 AES，目前來說 3DES 還是「安全的加密標準」，所以針對這個密碼 yubikey 沒有設定嘗試上限（PIN 和 PUK 有），因為就算攻擊者想要破解也很難（&lt;a class="link" href="https://zh.wikipedia.org/wiki/3DES#%E5%AE%89%E5%85%A8%E6%80%A7" target="_blank" rel="noopener"
>3DES 的安全性&lt;/a>）&lt;/p>
&lt;h3 id="使用情境-2">使用情境&lt;/h3>
&lt;ul>
&lt;li>修改 management key&lt;/li>
&lt;li>修改資料&lt;/li>
&lt;li>產生新金鑰對&lt;/li>
&lt;li>匯入密鑰&lt;/li>
&lt;li>產生憑證&lt;/li>
&lt;li>修改嘗試次數限制&lt;/li>
&lt;/ul>
&lt;p>以上內容是根據 &lt;a class="link" href="https://docs.yubico.com/yesdk/users-manual/application-piv/pin-puk-mgmt-key.html" target="_blank" rel="noopener"
>這篇文件&lt;/a> 整理出來的&lt;/p>
&lt;blockquote>
&lt;p>根據 &lt;a class="link" href="https://developers.yubico.com/yubikey-piv-manager/PIN_and_Management_Key.html" target="_blank" rel="noopener"
>這篇文章&lt;/a>，似乎還有其他密碼們，上面介紹的都是屬於 PIV（Personal Identity Verification），還有 OpenPGP、FIDO2 的 PIN&lt;/p>
&lt;/blockquote></description></item><item><title>Anbox</title><link>https://blog.simbafs.cc/p/linux/anbox/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/anbox/</guid><description>&lt;h1 id="anbox">Anbox&lt;/h1>
&lt;p>&lt;a class="link" href="https://anbox.io/" target="_blank" rel="noopener"
>anbox&lt;/a> 是 Android in a box，是一種基於容器化技術的 Android 模擬器，所以執行速度會比較快、比較省資源，而且因為每個 App 都在各自的容器裡面，所以比較安全
（應該沒理解錯吧？）。&lt;br>
安裝 anbox 需要先安裝兩個 kernal modules，然後安裝 anbox 後，為了之後方便，所以要裝 Google Play，不裝也是可以，但之後安裝其他 App 比較麻煩&lt;/p>
&lt;h2 id="系統">系統&lt;/h2>
&lt;p>我用的系統是 Ubuntu 21.04，如果你的系統不一樣，可能會有某些步驟不太一樣。&lt;br>
這次安裝因為涉及 Linux Kernel 所以隨時重開機有很大機會幫助改善遇到的問題&lt;/p>
&lt;h2 id="安裝-linux-kernal-modules">安裝 Linux Kernal Modules&lt;/h2>
&lt;p>如果你的 Linux kernale &amp;gt; 5.0，那理論上已經包在 Kernel 裡面了，所以不用安裝&lt;/p>
&lt;blockquote>
&lt;p>Starting with Ubuntu 19.04 binder and ashmem are now build with the standard Ubuntu kernel (&amp;gt;= 5.0) and you don’t have to install the modules from the PPA anymore.&lt;/p>
&lt;/blockquote>
&lt;p>但是我還是把命令跑了一次，反正有病治病沒病強身&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo add-apt-repository ppa:morphis/anbox-support
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt update &lt;span class="c1"># 這個步驟應該會包括在上面那個命令，但執行一次也不會壞&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install linux-headers-generic anbox-modules-dkms &lt;span class="c1"># 這個後面那個套件應該會找不到，跳過他&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo apt install software-properties-common
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo modprobe ashmem_linux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo modprobe binder_linux
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然後如果你還是很擔心不放心有沒有裝好，可以執行下面的指令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">git clone https://github.com/anbox/anbox-modules /tmp/anbox-modules
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /tmp/anbox-modules
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo ./INSTALL.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這時候如果你&lt;del>還是&lt;/del>很擔心，不確定有沒有裝好，可以用下面的命令檢查有沒有安裝好（這個時候可能需要重開機）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ls -1 /dev/{ashmem,binder} # 這個是官方用的，但是我怎麼試都失敗，但是 anbox 還是安裝成功了
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lsmod | grep -e ashmem -e binder # 我不確定這個找到是不是代表有成功啟動，但是他兩個都找的到
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;a class="link" href="https://docs.anbox.io/userguide/install_kernel_modules.html" target="_blank" rel="noopener"
>https://docs.anbox.io/userguide/install_kernel_modules.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="安裝-anbox">安裝 anbox&lt;/h2>
&lt;p>如果你的電腦上有 snap，就用 snap 裝；如果沒有，就先去裝 snap。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo snap install --devmode --beta anbox
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>嘿對，裝好了，可以用這個指令看看有沒有裝好&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">snap info anbox
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>&lt;a class="link" href="https://docs.anbox.io/userguide/install.html" target="_blank" rel="noopener"
>https://docs.anbox.io/userguide/install.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="apt">apt&lt;/h2>
&lt;p>如果你是 Ubuntu/Debian 長期使用者，你可能會想用 apt 裝 anbox，也不是不行，但是等等裝 Google Play 的時候會出一點點問題（OverlayFS 路徑有問題），最佳解決辦法就是用 snap，不要用 apt&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt remove anbox
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="安裝-google-play">安裝 Google Play&lt;/h2>
&lt;p>因為 anbox 沒有內建 apk 安裝器，所以沒辦法很方便的安裝 APP，最方便的方法是安裝 Google Play。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install wget curl lzip tar unzip squashfs-tools
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wget https://raw.githubusercontent.com/geeks-r-us/anbox-playstore-installer/master/install-playstore.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod +x install-playstore.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo ./install-playstore.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果遇到 Overlay not enable 的問題，請不要用 apt，至於位什麼自己研究 &lt;code>install-playstores.sh&lt;/code>
跑完如果沒錯誤就可以打開 &lt;code>anbox.appmgr&lt;/code>，打開 play 安裝 APP 了。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="https://www.clusterednetworks.com/blog/post/install-google-play-store-anbox" target="_blank" rel="noopener"
>https://www.clusterednetworks.com/blog/post/install-google-play-store-anbox&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="問遺">問遺&lt;/h2>
&lt;p>目前裝好 APP 但是我打不開&lt;/p></description></item><item><title>Ibus Font</title><link>https://blog.simbafs.cc/p/linux/ibus-font/</link><pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/ibus-font/</guid><description>&lt;h1 id="ibus-font">Ibus Font&lt;/h1>
&lt;p>最近在打字時總覺得中文選字的時候 ibus 字體好小，於是就開始查怎麼弄&lt;/p>
&lt;p>經過搜尋後，找到 &lt;a class="link" href="https://askubuntu.com/questions/1030442/how-to-increase-font-size-of-preview-options-when-using-an-input-method" target="_blank" rel="noopener"
>https://askubuntu.com/questions/1030442/how-to-increase-font-size-of-preview-options-when-using-an-input-method&lt;/a> 這個網頁，總而言之就是先去裝 &lt;a class="link" href="https://extensions.gnome.org/extension/1121/ibus-font-setting/" target="_blank" rel="noopener"
>ibus font setting&lt;/a> 這個外掛，然後就可以用 &lt;code>ibus-setup&lt;/code> 調整了&lt;br>
照做之後的確可以調大小字體，但我不知道是不是因為裝了這個外掛的關係，反正我是成功改好了&lt;/p></description></item><item><title>kdeconnect</title><link>https://blog.simbafs.cc/p/linux/kdeconnect/</link><pubDate>Thu, 07 Apr 2022 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/kdeconnect/</guid><description>&lt;h1 id="kdeconnect">kdeconnect&lt;/h1>
&lt;p>kdeconnect 顧名思義是 kde 出的一款 connect 軟體，功能非常多而且方便。電腦和手機都安裝好軟體後，只要在同一個網域就可以配對連接&lt;/p>
&lt;h2 id="功能介紹">功能介紹&lt;/h2>
&lt;ol>
&lt;li>基本訊息 - 在電腦和手機上可以互相看到電池、網路等基本訊息&lt;/li>
&lt;li>通知 - 可以設定電腦顯示手機通知或手機顯示電腦通知，或是兩者都開啟，我通常只開前者&lt;/li>
&lt;li>媒體控制 - 無論是 VLC、YouTube、Nefflix 或任何網頁，都可以控制進度、音量、暫停，而且雙方都可以控制。這個是我最愛的功能之一&lt;/li>
&lt;li>命令控制 - kdeconnect 可以讓你在手機上執行電腦上預先設定好的指令，像是關機、鎖定等等，下面會推薦幾個我設定的命令&lt;/li>
&lt;li>傳檔案和資料夾共用 - kdeconnect 可以讓你連接電腦和手機上特定的資料夾，或是傳送單一檔案&lt;/li>
&lt;li>共用剪貼簿 - 如其名，這是一個非常實用的功能，但是有時候觸發條件怪怪的&lt;/li>
&lt;li>輸入 - 不論是滑鼠、鍵盤，兩邊都可以互相當對方的輸入裝置，這個功能非常好用
還有像是讓手機大叫（找手機用）、簡報控制、傳簡訊、手機有電話的時候自動暫停音樂等等奇奇怪怪的功能&lt;/li>
&lt;/ol>
&lt;h2 id="推薦命令">推薦命令&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">Description&lt;/th>
&lt;th style="text-align:left">Command&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">鎖定螢幕並暫停 VLC 播放&lt;/td>
&lt;td style="text-align:left">&lt;code>loginctl lock-session; dbus-send --type=method_call --dest=org.mpris.MediaPlayer2.vlc /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">解除鎖定螢幕（免密碼）&lt;/td>
&lt;td style="text-align:left">&lt;code>loginctl unlock-session&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Modeline</title><link>https://blog.simbafs.cc/p/linux/vim/modeline/</link><pubDate>Thu, 07 Apr 2022 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/vim/modeline/</guid><description>&lt;h1 id="modeline">Modeline&lt;/h1>
&lt;p>&lt;code>modeline&lt;/code> 是一個可以將 vim 設定嵌入檔案的方式，這樣就可以讓某些檔案有自己的設定，像是折疊、不要行數、tab 等於多少空白等等。&lt;/p>
&lt;h2 id="簡單的條件">簡單的條件&lt;/h2>
&lt;p>簡單的 &lt;code>modeline&lt;/code> 需要滿足幾個條件：&lt;/p>
&lt;ol>
&lt;li>開頭（不必是行首）至少有一個空白/tab&lt;/li>
&lt;li>用 &lt;code>vim&lt;/code>、&lt;code>vi&lt;/code> 等字開頭，這裡還可以設定哪個版本才要載入&lt;/li>
&lt;/ol>
&lt;h2 id="基本的範例">基本的範例&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"> vim: wrap
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="參考資料">參考資料&lt;/h2>
&lt;p>&lt;a class="link" href="https://stackoverflow.com/questions/3958416/embed-vim-settings-in-file" target="_blank" rel="noopener"
>https://stackoverflow.com/questions/3958416/embed-vim-settings-in-file&lt;/a>&lt;br>
help page in &lt;code>:help modeline&lt;/code>&lt;/p></description></item><item><title>Bluetooth 突然卡住都不動</title><link>https://blog.simbafs.cc/p/linux/bluwtooth-error/</link><pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/bluwtooth-error/</guid><description>&lt;h1 id="bluetooth-突然卡住都不動">Bluetooth 突然卡住都不動&lt;/h1>
&lt;p>裝了 Ubuntu 20.04 之後不知道為什麼藍芽用一用就會卡住，所有設備都連不上，也關不掉。一開始的解決方式是重開機（這時候關機會跳一個奇怪的錯誤訊息），但是覺得太沒效率了，上網查了一下。&lt;/p>
&lt;h2 id="原因">原因&lt;/h2>
&lt;p>根據 &lt;a class="link" href="https://bugs.launchpad.net/ubuntu/&amp;#43;source/linux/&amp;#43;bug/1859592" target="_blank" rel="noopener"
>這個網頁&lt;/a>，這個似乎是 linux 核心的藍芽驅動有問題（我沒有認真看，但好像是升級到最新的 linux kernel 就可以解決了）。&lt;br>
雖然升級 linux kernel 應該可以一勞永逸解決這個問題，但是這個 bug 其實不常出現，為了他編譯核心有點大題小做，所以我們需要一個簡單的方法解決。&lt;/p>
&lt;h2 id="輕便解法">輕便解法&lt;/h2>
&lt;p>根據 &lt;a class="link" href="https://askubuntu.com/questions/1231074/ubuntu-20-04-bluetooth-not-working" target="_blank" rel="noopener"
>這篇問答&lt;/a>，經過我的測試，第一個答案就可以解決了，當藍芽又掛掉時，執行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo rmmod btusb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo modprobe btusb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這樣藍芽就回來了。這兩個指令簡單來說就是重新載入藍芽模組，這就是為什麼重開機可以解決（重開機就是重新載入所有模組）&lt;/p></description></item><item><title>ssh on gitea with docker</title><link>https://blog.simbafs.cc/p/linux/server/ssh-on-gitea-with-docker/</link><pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/server/ssh-on-gitea-with-docker/</guid><description>&lt;h1 id="gitea">Gitea&lt;/h1>
&lt;p>&lt;a class="link" href="https://gitea.io" target="_blank" rel="noopener"
>Gitea&lt;/a> 是一個開源的 git 伺服器，他的界面幾乎和 &lt;a class="link" href="https://github.com" target="_blank" rel="noopener"
>GitHub&lt;/a> 一模一樣，但是完全開源而且非常輕，甚至一片樹梅派就可以開伺服器了。Gitea 因為是使用 &lt;a class="link" href="https://golang.org/" target="_blank" rel="noopener"
>Golang&lt;/a> 編寫的，所以提供各種平台的執行檔。我選擇透過 docker 裝 Gitea 伺服器，但是這樣有一個問題，gitea 伺服器開在 container 內，沒辦法使用標準的 22 port，所以 git clone 就必須加上一個醜醜的數字，像是這樣&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git clone git@domain:10022:user/repo.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這個問題 Gitea 官方已經有提供&lt;a class="link" href="https://docs.gitea.io/en-us/install-with-docker/#ssh-container-passthrough" target="_blank" rel="noopener"
>完整的教學&lt;/a>了，但是是英文版，我這篇文章是我讀完消化過後的中文版教學&lt;/p>
&lt;h2 id="容器-ssh-穿透">容器 ssh 穿透&lt;/h2>
&lt;p>因為 Gitea 的 ssh 是跑在容器裡，我沒辦法讓他和 host 共用 22 port，所以要透過 host 「轉發」連線。&lt;/p>
&lt;h2 id="1-建立-git-使用者">1. 建立 git 使用者&lt;/h2>
&lt;p>先在 host 建立一個名叫 git 的使用者，因為這個帳號會被對應到容器內的 git 使用者，所以要有一樣的 UID, GID&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo adduser git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">grep git /etc/passwd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>記好 git 的 UID 和 GID&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">git:x:1002:1002:,,,:/home/git:/bin/bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">------^^^^ ^^^^
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">------GID UID
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="2-docker-compose">2. docker-compose&lt;/h2>
&lt;p>以下是我的 docker-compose，可以根據不同的需求再修改（像是加入 db）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">version: &amp;#34;3&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">services:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gitea:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> container_name: gitea
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: gitea/gitea:latest
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ports:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;10022:22&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;10080:3000&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;/home/simba/website/gitea/data:/data&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &amp;#34;/home/git/.ssh:/data/git/.ssh&amp;#34; # ssh 連線需要，這樣使用者新增 ssh key 時才會同步到 host 上，使用者才連的進來
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> restart: &amp;#39;unless-stopped&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> environment:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - USER_UID=1002
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - USER_GID=1002
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>UID 和 GID 記得換成你的，我的和你的不一定一樣&lt;/p>
&lt;h2 id="3-幫-git-帳號產生-ssh-key">3. 幫 git 帳號產生 ssh key&lt;/h2>
&lt;p>要有 ssh key 才能轉發（host 上的 git 要連線到 container 內）&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo -u git ssh-keygen -t rsa -b &lt;span class="m">4096&lt;/span> -C &lt;span class="s2">&amp;#34;Gitea Host Key&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="4-ssh-轉發">4. ssh 轉發&lt;/h2>
&lt;p>這時候如果你開啟服務，為一個使用者新增 ssh key 你會發現在 host 上 &lt;code>~git/.ssh/authorized_keys&lt;/code> 會多出一行，長的像這樣&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">command=&amp;#34;/app/gitea/gitea --config=/data/gitea/conf/app.ini serv key-1&amp;#34;,no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa AAAA......(ssh key)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這行是 Gitea 新增的，功能是讓新的 ssh 連線(user -&amp;gt; host)進來時執行 &lt;code>/app/gitea/gitea serv&lt;/code> 這個指令，但是我們希望他可以執行 ssh 轉發，所以我們可以在 host 的 &lt;code>/app/gitea/&lt;/code> 下新增一個 &lt;code>gitea&lt;/code> 執行檔幫我們做 ssh 轉發（這裡不會有 gitea 執行檔，因為是在 host，gitea 本體在 container 內）&lt;br>
首先新增目錄 &lt;code>sudo mkdir -p /app/gitea&lt;/code>&lt;br>
再來建立檔案 &lt;code>/app/gitea/gitea&lt;/code>，內容如下&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/sh
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>ssh -p &lt;span class="m">2222&lt;/span> -o &lt;span class="nv">StrictHostKeyChecking&lt;/span>&lt;span class="o">=&lt;/span>no git@127.0.0.1 &lt;span class="s2">&amp;#34;SSH_ORIGINAL_COMMAND=\&amp;#34;&lt;/span>&lt;span class="nv">$SSH_ORIGINAL_COMMAND&lt;/span>&lt;span class="s2">\&amp;#34; &lt;/span>&lt;span class="nv">$0&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>不要忘記給他執行權限 &lt;code>sudo chmod 755 /app/gitea/gitea&lt;/code>&lt;/p>
&lt;h2 id="大功告成">大功告成！&lt;/h2>
&lt;h2 id="心得">心得&lt;/h2>
&lt;p>一開始我沒找到官方的教學，一方面是我想自己試試看，二方面是因為官方文件中英文完全不一樣，看英文版才完整，中文只給兩條指令。&lt;/p>
&lt;h2 id="參考連結">參考連結&lt;/h2>
&lt;p>&lt;a class="link" href="https://docs.gitea.io/en-us/install-with-docker/#ssh-container-passthrough" target="_blank" rel="noopener"
>https://docs.gitea.io/en-us/install-with-docker/#ssh-container-passthrough&lt;/a>&lt;br>
&lt;a class="link" href="https://asaba.sakuragawa.moe/2018/06/%E6%93%BA%E8%84%AB%E6%8E%A7%E5%88%B6%EF%BC%8C%E7%94%A8-docker-%E8%87%AA%E5%BB%BA-gitea-gogs-%E7%B7%9A%E4%B8%8A%E4%BB%A3%E7%A2%BC%E5%8D%94%E4%BD%9C%E5%B9%B3%E8%87%BA/" target="_blank" rel="noopener"
>https://asaba.sakuragawa.moe/2018/06/擺脫控制，用-docker-自建-gitea-gogs-線上代碼協作平臺/&lt;/a>&lt;/p></description></item><item><title>Cast Phone Screen to Computer</title><link>https://blog.simbafs.cc/p/linux/cast-phone-screen-to-computer/</link><pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/cast-phone-screen-to-computer/</guid><description>&lt;h1 id="cast-phone-screen-to-computer">Cast Phone Screen to Computer&lt;/h1>
&lt;p>有沒有一種經驗是某的應用程式手機板操作勉強算順暢，但是一電腦上就炸開，反應慢到靠北、界面又很難用（沒錯 messenger 我正在看著你）。這個時候相信你會和我一樣想把手機畫面投影到電腦上的一個視窗裡面，最好可以互動、可以打字。有人第一個想法是在手機開 VNC 伺服器，但是這個方法有點麻煩，這篇文章介紹的是目前我覺得最佳解決方案。&lt;/p>
&lt;h2 id="scrcpy">SCRCPY&lt;/h2>
&lt;p>這個軟體支援有線（ USB debug ）、無線（ WIFI ）的連接，還支援螢幕錄影和傳檔案。最重要的是，開在電腦上的視窗可以調整大小，不需要侷限在一個小小的視窗內，你最大可以放大到全螢幕！在某種意義上你獲得了一台和電腦一樣大的手機。&lt;/p>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>安裝流程意外的簡單，只需要用 &lt;code>apt&lt;/code> 就可以安裝了，或是你可以自己 build，稍微看了一下 &lt;a class="link" href="https://github.com/Genymobile/scrcpy/blob/master/BUILD.md" target="_blank" rel="noopener"
>說明&lt;/a> ，看起來不困難，但是既然 &lt;code>apt&lt;/code> 就可以安裝了我們就省一點時間&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ sudo apt install scrcpy
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="usb-debug">USB debug&lt;/h2>
&lt;p>首先無論是有線無線都要先打開手機的 &lt;code>USB debug&lt;/code> 選項，在開發人員選項裡面，詳細步驟請看 &lt;a class="link" href="https://developer.android.com/studio/debug/dev-options#enable" target="_blank" rel="noopener"
>官方文件&lt;/a>。&lt;/p>
&lt;h2 id="usb">USB&lt;/h2>
&lt;p>如果不介意有一條線插著~~（順便充電）~~的話，投影畫面非常簡單，只有兩個步驟：&lt;/p>
&lt;ol>
&lt;li>插上 USB 並且無論跳出什麼都按「同意」「OK」&lt;/li>
&lt;li>打開終端機，執行 &lt;code>scrcpy&lt;/code>
然後就會有一個視窗跳出來，你現在就可以在電腦上滑手機了！&lt;/li>
&lt;/ol>
&lt;h2 id="wireless">Wireless&lt;/h2>
&lt;p>無線的話比較麻煩，首先是必須要可以連線，看是在同一個區域網路或是 VPN、ssh tunnel 都可以。再來是因為連線設定頗麻煩，所以我把相關的步驟寫成一個 &lt;a class="link" href="https://gist.github.com/simbafs/9132289f63368ad325d6a2ef62be7a20" target="_blank" rel="noopener"
>script&lt;/a>，下載後給予執行權限就可以執行了（當然要安裝 scrcpy ）。有線的方式一樣很簡單，不用加任何選項就可以連接了。&lt;br>
如果要啟用無線，只需要加上 &lt;code>-w&lt;/code> 選項（用預設的 ip &lt;code>192.168.43.1&lt;/code>)&lt;br>
如果 ip 不是預設的話，可以加上 &lt;code>-i IP&lt;/code> 來指定其他的 ip&lt;br>
加上 &lt;code>-f&lt;/code> 可以開啟全螢幕&lt;/p>
&lt;h2 id="參連連結">參連連結&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/Genymobile/scrcpy" target="_blank" rel="noopener"
>https://github.com/Genymobile/scrcpy&lt;/a>
&lt;a class="link" href="https://developer.android.com/studio/debug/dev-options" target="_blank" rel="noopener"
>https://developer.android.com/studio/debug/dev-options&lt;/a>
&lt;a class="link" href="https://gist.github.com/simbafs/9132289f63368ad325d6a2ef62be7a20" target="_blank" rel="noopener"
>https://gist.github.com/simbafs/9132289f63368ad325d6a2ef62be7a20&lt;/a>&lt;/p></description></item><item><title>YouComopleteMe Install</title><link>https://blog.simbafs.cc/p/linux/vim/youcomopleteme-install/</link><pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/vim/youcomopleteme-install/</guid><description>&lt;h1 id="ycm-installation">YCM Installation&lt;/h1>
&lt;h2 id="下載-source-code">下載 source code&lt;/h2>
&lt;ol>
&lt;li>編輯 ~/.vimrc&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-vim" data-lang="vim">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">Plug&lt;/span> &lt;span class="s1">&amp;#39;Valloric/YouCompleteMe&amp;#39;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>接著按下 &lt;!-- raw HTML omitted -->esc&lt;!-- raw HTML omitted --> &lt;!-- raw HTML omitted -->:w | so %&lt;!-- raw HTML omitted --> 載入設定&lt;/li>
&lt;li>接著 &lt;!-- raw HTML omitted -->:PlugInstall&lt;!-- raw HTML omitted --> 下載 source code&lt;/li>
&lt;li>存檔離開&lt;/li>
&lt;/ol>
&lt;h2 id="編譯">編譯&lt;/h2>
&lt;ol>
&lt;li>執行 &lt;code>sudo apt install python3-dev build-essential&lt;/code>&lt;/li>
&lt;li>進入 &lt;code>~/.vim/plugged/YouCompleteMe&lt;/code>&lt;/li>
&lt;li>執行 &lt;code>./install.py --help&lt;/code> 並挑選需要的選項&lt;/li>
&lt;li>執行 &lt;code>./install.py &amp;lt;你要的選項&amp;gt;&lt;/code>&lt;/li>
&lt;/ol></description></item><item><title>Firefox Touch Screen Scroll</title><link>https://blog.simbafs.cc/p/linux/firefox-touch-screen-scroll/</link><pubDate>Sat, 08 May 2021 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/firefox-touch-screen-scroll/</guid><description>&lt;h1 id="firefox-touch-screen-scroll">Firefox Touch Screen Scroll&lt;/h1>
&lt;p>再換了觸控筆電後，在 firefox 一直有個問題：觸控往下滑會被當成選取，要卷動一定要用右邊的 scroll bar&lt;/p>
&lt;h2 id="解決方案">解決方案&lt;/h2>
&lt;p>按照 &lt;a class="link" href="https://askubuntu.com/questions/853910/ubuntu-16-and-touchscreen-scrolling-in-firefox" target="_blank" rel="noopener"
>https://askubuntu.com/questions/853910/ubuntu-16-and-touchscreen-scrolling-in-firefox&lt;/a> 的最佳解法，真的加上 &lt;code>MOZ_USE_XINPUT2=1&lt;/code> 的環境變數就可以了。&lt;br>
另外在設定 &lt;code>~/.local/share/applications/firefox.desktop&lt;/code> 的時候要注意有不只一個 Exec，改完如果沒有生效可以重開機看看。&lt;/p></description></item><item><title>Logitech Mouse Permission Error</title><link>https://blog.simbafs.cc/p/linux/logitech-mouse-permission-error/</link><pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/logitech-mouse-permission-error/</guid><description>&lt;h1 id="logitech-mouse-permission-error">Logitech Mouse Permission Error&lt;/h1>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>我的無線華和滑鼠和鍵盤都是羅技的，在我的 Ubuntu 筆電上一直都沒有問題。有一次我想改我的鍵盤被配置，但是因為 logitech unifying 沒有 Linux 版，所以我另一個軟體叫 solaar，功能是差不多的。
當我裝好軟體以後，鍵盤滑鼠操作都沒問題，只有插上滑鼠的接收器以後都對跳出一個 permission error 的錯誤視窗。雖然在 solaar 裡面就無法看到我的滑鼠就是了，但是完全不影響使用，所以我就擺在那邊放它爛，反正就是多按一個叉叉。&lt;/p>
&lt;h2 id="嘗試自己解">嘗試自己解&lt;/h2>
&lt;p>今天閒閒沒事做剛好來看看這個怎麼解。我一開始想說，把他的 permission 改成和鍵盤一樣就啦！於是我進行了下面的操作&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ ls /dev/hidraw*
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>拔下鍵盤的接收器，發現他是 &lt;code>/dev/hidraw4&lt;/code> 和 &lt;code>/dev/hidraw5&lt;/code>，再插上去。拔下滑鼠接收器，發現他是 &lt;code>/dev/hidraw2&lt;/code>。&lt;br>
並找到鍵盤的權限是 &lt;code>rw-rw----&lt;/code>，滑鼠是 &lt;code>rw-------&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ chmod &lt;span class="m">660&lt;/span> /dev/hidraw2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>拔下滑鼠接收器，插上。&lt;br>
沒用。&lt;/p>
&lt;p>我猜這個方法會失敗應該是因為他在我改之前就已經先跳錯誤了，等我改完它右沒有偵測，我就得把它拔下來在插上去，我又會看到錯誤訊息&amp;hellip;&amp;hellip; (looping&lt;br>
於是我上網找答案&lt;/p>
&lt;h2 id="網路上的解">網路上的解&lt;/h2>
&lt;p>我 Google &lt;code>ubuntu logitech permission error&lt;/code> 第一個就是我要的！&lt;/p></description></item><item><title>Libreoffice Code Format Plugin Installation</title><link>https://blog.simbafs.cc/p/linux/libreoffice-code-format-plugin-install/</link><pubDate>Sat, 13 Mar 2021 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/libreoffice-code-format-plugin-install/</guid><description>&lt;h1 id="安裝">安裝&lt;/h1>
&lt;ol>
&lt;li>去 &lt;a class="link" href="https://extensions.libreoffice.org/en/extensions/show/code-highlighter" target="_blank" rel="noopener"
>https://extensions.libreoffice.org/en/extensions/show/code-highlighter&lt;/a> 下載最新的外掛&lt;/li>
&lt;li>把檔名前面的前綴刪掉，
&lt;blockquote>
&lt;p>例如：&lt;code>ea4db15f_codehighlighter.oxt&lt;/code> -&amp;gt; &lt;code>codehighlighter.oxt&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>安裝相依性套件&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sudo apt install libreoffice-script-provider-python python3-pip
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo pip3 install pygments
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>安裝外掛
&lt;blockquote>
&lt;p>工具 &amp;gt; 擴充套件管理員 &amp;gt; 加入 &amp;gt; 選擇你的檔案&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;h1 id="使用">使用&lt;/h1>
&lt;ol>
&lt;li>插入文字方塊
&lt;blockquote>
&lt;p>插入 &amp;gt; 文字方塊&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>貼上程式碼&lt;/li>
&lt;li>選擇文字方塊，不是文字（按文字方塊的邊邊）&lt;/li>
&lt;li>format
&lt;blockquote>
&lt;p>工具 &amp;gt; highlight code &amp;gt; 選得語言、style&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;h1 id="參考資料">參考資料&lt;/h1>
&lt;p>&lt;a class="link" href="https://extensions.libreoffice.org/en/extensions/show/code-highlighter" target="_blank" rel="noopener"
>Libreoffice extensions&lt;/a>
&lt;a class="link" href="https://github.com/slgobinath/libreoffice-code-highlighter/issues/29#issuecomment-635216707" target="_blank" rel="noopener"
>issue&lt;/a>&lt;/p></description></item><item><title>docker login error</title><link>https://blog.simbafs.cc/p/linux/docker/docker-login-error/</link><pubDate>Sat, 05 Dec 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/docker/docker-login-error/</guid><description>&lt;h1 id="docker-login-error">Docker Login Error&lt;/h1>
&lt;h2 id="錯誤說明">錯誤說明&lt;/h2>
&lt;p>昨天我在 terminal 登入 docker 的時候發現不知道為什麼不能登入，我先透過網頁登入確認過密碼沒有問題，也不是打錯字的關係，但還是不能當入。總是會有類似以下的錯誤訊息。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Error saving credentials: error storing credentials - err: exit status 1, out: `exit status 1: gpg: simbafs: 已跳過: 沒有公鑰
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gpg: [stdin]: encryption failed: 沒有公鑰
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Password encryption aborted.`
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="解決方法">解決方法&lt;/h2>
&lt;p>經過搜尋之後，我按照 &lt;a class="link" href="https://github.com/docker/docker-credential-helpers/issues/102#issuecomment-388634452" target="_blank" rel="noopener"
>https://github.com/docker/docker-credential-helpers/issues/102#issuecomment-388634452&lt;/a> 的方法成功登入了，但是在這之前要先安裝 &lt;code>gpg&lt;/code> 和 &lt;code>pass&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">apt install gnupg2 pass
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>接下來是我用的指令&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">apt install gnupg2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wget https://github.com/docker/docker-credential-helpers/releases/download/v0.6.3/docker-credential-pass-v0.6.3-amd64.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar xvf docker-credential-pass-v0.6.3-amd64.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod &lt;span class="m">755&lt;/span> docker-credential-pass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sudo mv docker-credential-pass /usr/bin/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ass insert docker-credential-helpers/docker-pass-initialized-check
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pass insert docker-credential-helpers/docker-pass-initialized-check
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pass show docker-credential-helpers/docker-pass-initialized-check
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker-credential-pass list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker login
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="參考連結">參考連結&lt;/h2>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/docker/docker-credential-helpers/issues/102#issuecomment-388634452" target="_blank" rel="noopener"
>https://github.com/docker/docker-credential-helpers/issues/102#issuecomment-388634452&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://stackoverflow.com/questions/50151833/cannot-login-to-docker-account/52881198#52881198" target="_blank" rel="noopener"
>https://stackoverflow.com/questions/50151833/cannot-login-to-docker-account/52881198#52881198&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://gist.github.com/dataday/3c267be29e32573829c4781c99ea3395" target="_blank" rel="noopener"
>https://gist.github.com/dataday/3c267be29e32573829c4781c99ea3395&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Connect to Ethernet in Docker Container</title><link>https://blog.simbafs.cc/p/linux/docker/connect-to-ethernet-in-docker-container/</link><pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/docker/connect-to-ethernet-in-docker-container/</guid><description>&lt;h1 id="connect-to-ethernet-in-docker-container">Connect to Ethernet in Docker Container&lt;/h1>
&lt;h2 id="如何在-docker-container-裡連接-ethernet">如何在 docker container 裡連接 ethernet&lt;/h2>
&lt;p>今天突然有個需求是在一個已經開啟的 container 弄東西，需要網路，但是不知道為什麼一直不上，後來發現是 docker 沒有設定 DNS 的問題，只要在外面輸入兩行指令就可以了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">DOCKER_OPTS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--dns 8.8.8.8&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">systemctl restart docker
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然後重新啟動 docker&lt;/p></description></item><item><title>docker commit</title><link>https://blog.simbafs.cc/p/linux/docker/docker-commit/</link><pubDate>Fri, 27 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/docker/docker-commit/</guid><description>&lt;h1 id="docker-commit">Docker Commit&lt;/h1>
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>上次提到可以用 Dockerfile 建立 docker image，但我們還有令一個方法可以建立 docker image，那就是 &lt;code>docker commit&lt;/code> 指令&lt;/p>
&lt;h3 id="和-dockerfile-差別">和 Dockerfile 差別&lt;/h3>
&lt;p>&lt;code>docker commit&lt;/code> 有點像是手動版的 Dockerfile，在用 Dockerfile 建構 docker image 的時候，docker build 的工作就像是自動根據 Dockerfile 操作 &lt;code>docker commit&lt;/code>。
Dockerfile 比較適合用在自動化交付和部屬，例如說你有一份程式碼，要將他包成 Docker 就很適合用 Dockerfile 自動化操作，因為程式碼會改變，但是包裝的流程基本上都是一樣的。
&lt;code>docker commit&lt;/code> 適合用在建構環境，因為會有比較麻煩的操作，如果寫成 Dockerfile 會比較麻煩，當然如果可以的話還是寫成 Dockerfile 會比較好，因為更新的時候會比較方便。
在建構 image 的時候要用哪個方法就看個人取捨了。&lt;/p>
&lt;h3 id="docker-commit-指令">&lt;code>docker commit&lt;/code> 指令&lt;/h3>
&lt;p>&lt;code>docker commit&lt;/code> 可以把運行中的 comtainer 轉成 images，有點類似令存新檔的概念。先來看看參數吧！&lt;/p>
&lt;h4 id="參數">參數&lt;/h4>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ docker commit --help
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Usage: docker commit &lt;span class="o">[&lt;/span>OPTIONS&lt;span class="o">]&lt;/span> CONTAINER &lt;span class="o">[&lt;/span>REPOSITORY&lt;span class="o">[&lt;/span>:TAG&lt;span class="o">]]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Create a new image from a container&lt;span class="err">&amp;#39;&lt;/span>s changes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Options:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -a, --author string Author &lt;span class="o">(&lt;/span>e.g., &lt;span class="s2">&amp;#34;John Hannibal Smith &amp;lt;hannibal@a-team.com&amp;gt;&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -c, --change list Apply Dockerfile instruction to the created image
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -m, --message string Commit message
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -p, --pause Pause container during commit &lt;span class="o">(&lt;/span>default &lt;span class="nb">true&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">選項&lt;/th>
&lt;th style="text-align:left">說明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">-a&lt;/td>
&lt;td style="text-align:left">作者的名字&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-c&lt;/td>
&lt;td style="text-align:left">我還沒研究出來有什麼用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-m&lt;/td>
&lt;td style="text-align:left">訊息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">-p&lt;/td>
&lt;td style="text-align:left">建構時停容器&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>bash number loop</title><link>https://blog.simbafs.cc/p/linux/bash/bash-number-loop/</link><pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/bash/bash-number-loop/</guid><description>&lt;h1 id="bash-number-loop">Bash Number Loop&lt;/h1>
&lt;p>今天在某的地方剛好看到一個 bash 的小技巧，當我們要從 1 數到 100 時，通常會用 &lt;code>seq&lt;/code> 指令來做，但是如果我們的需求剛剛好是每次遞增（遞減）1 的話，就可以使用 &lt;code>{start..end}&lt;/code> 縮寫，下面兩個範例的效果是一樣的：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># for 迴圈 + seq 的寫法&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> i in &lt;span class="k">$(&lt;/span>seq &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> 100&lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$i&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 用 {start..end}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="o">{&lt;/span>1..100&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這個技巧也可以用在建立檔案，像這樣：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">touch user&lt;span class="o">{&lt;/span>1..100&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>bash completion</title><link>https://blog.simbafs.cc/p/linux/bash/bash-completion/</link><pubDate>Sat, 14 Nov 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/bash/bash-completion/</guid><description>&lt;h1 id="bash-completion">Bash Completion&lt;/h1>
&lt;h2 id="需求">需求&lt;/h2>
&lt;p>今天寫了一個 bash script 幫我管理 mongodb docker，在使用的時候一些子命令，像是 &lt;code>up&lt;/code>、&lt;code>down&lt;/code>、&lt;code>clean&lt;/code>。我希望可以讓 bash 當我自動補齊這些選項。&lt;/p>
&lt;h2 id="bash_completion">&lt;code>bash_completion&lt;/code>&lt;/h2>
&lt;p>&lt;code>bash_completion&lt;/code> 是一個可以幫我們做程式化補齊的工具，像是 git 就有使用到這個工具，在 commit、push 的時候按 tab 都會顯示出當下我們可以用的東西，像是 &lt;code>git push&amp;lt;tab&amp;gt;&amp;lt;tab&amp;gt;&lt;/code> 就會自動補齊 &lt;code>origin&lt;/code> 而不是給我們看檔案（bash 預設只會補齊檔案和命令）。我們這次只須要用基本的 &lt;code>complete&lt;/code> 就可以了&lt;/p>
&lt;h2 id="complete">&lt;code>complete&lt;/code>&lt;/h2>
&lt;p>&lt;code>complete&lt;/code> 可以幫命令加上簡單的自動完成，其實 &lt;code>bash_completion&lt;/code> 也是去呼叫這個命令來達成自動補齊。&lt;code>complete&lt;/code> 傻用非常簡單，像下面這樣就可以幫 &lt;code>mongodb&lt;/code> 這個命令加上自動補齊&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">complete&lt;/span> -W &lt;span class="s2">&amp;#34;up down clean&amp;#34;&lt;/span> mongodb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-W&lt;/code> 選項代表後面是字詞列表，用 &lt;code>-F&lt;/code> 後面可以接一個函數，但是這個我沒研究，也許下一個專案就是研究 &lt;code>complete&lt;/code> 也說不定。&lt;/p></description></item><item><title>Docker 基礎指令</title><link>https://blog.simbafs.cc/p/linux/docker/docker-command/</link><pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/docker/docker-command/</guid><description>&lt;h1 id="docker-指令">Docker 指令&lt;/h1>
&lt;h2 id="install">Install&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">apt install docker docker.io docker-compose
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="what-is-docker">What is docker&lt;/h2>
&lt;p>Docker 是一個容器化的技術，基本上使用的時候可以把他當成虛擬機，雖然他們的使用的技術完全不一樣。對新手來說，在 Docker 裡面有四個重要的名詞：dockerfile, docker image, docker container, docker-compose。&lt;/p>
&lt;ol>
&lt;li>dockerfile&lt;br>
純文字檔，定義建立 docker image 的步驟，有點像是一個 bash shell。通常命名成 &lt;code>Dockerfile&lt;/code> ，在 build 的時候會預設用這個，也可以用 &lt;code>-f&lt;/code> 來指定其他的檔案。&lt;/li>
&lt;li>docker image&lt;br>
這是透過 &lt;code>docker build&lt;/code> 編譯出來的東西。可以想成 docker container 的藍圖，在 &lt;code>docker pull&lt;/code> 的時候也是下載 docker image 而不是 dockerfile。基本上 image 裡面已經包括了編譯好的執行檔和基本的環境設定，所以在 docker 外面是不用做他設定的，這也是 docker 的魅力所在。&lt;/li>
&lt;li>docker container&lt;br>
每個 docker image 可以產生很多個 container，也就是執行中的程式。在這裡你已經可以用 docker 來建立各種服務了。這裡也可以想像成虛擬機，用 &lt;code>docker exec -it container_name bash&lt;/code> 可以進到 container 裡面(如果裡面有 bash 的話)&lt;/li>
&lt;li>docker-compose&lt;br>
一個服務不是一個 container 就可以架起來的，通常需要好幾個 container。這時候如果透過指令啟動也許會有忘記啟動和設定複雜的問題，所以有了這個工具。他透過 yml 設定來啟動服務。值得注意的是在同一個 &lt;code>docker-compose.yml&lt;/code> 啟動的 container 會在同一個網路內而和外面隔開，所以如果是 containers 之間的通訊不用把 port 暴露出來，只有開給外面的要 expose。&lt;/li>
&lt;/ol></description></item><item><title>Mxlinux Boot with Systemd</title><link>https://blog.simbafs.cc/p/linux/mxlinux-boot-with-systemd/</link><pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/mxlinux-boot-with-systemd/</guid><description>&lt;h1 id="mxlinux-boot-with-systemd">Mxlinux Boot with Systemd&lt;/h1>
&lt;h2 id="問題">問題&lt;/h2>
&lt;p>在 mxlinux 裡面，預設的 init 不是 systmed，這導致如果想用 systemctl 的時候就會跳出錯誤說&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">System has not been booted with systemd as init system
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>像是在安裝 &lt;code>mongodb-org&lt;/code> 的時候他就要用到 &lt;code>systemctl&lt;/code> 然後就會出錯。&lt;/p>
&lt;h2 id="解法">解法&lt;/h2>
&lt;p>其實 mxlinux 已經幫我們想好解法了，在開機選項時選 &lt;code>Advence&lt;/code> &amp;gt; &lt;code>Systemd&lt;/code> 就會以 systemd 開機&lt;/p></description></item><item><title>Vim Auto Comment Plugin</title><link>https://blog.simbafs.cc/p/linux/vim/vim-auto-comment-plugin/</link><pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/vim/vim-auto-comment-plugin/</guid><description>&lt;h1 id="vim-auto-comment-plugin">Vim Auto Comment Plugin&lt;/h1>
&lt;h2 id="套件">套件&lt;/h2>
&lt;p>&lt;a class="link" href="https://github.com/preservim/nerdcommenter" target="_blank" rel="noopener"
>nerdcommenter&lt;/a>&lt;/p>
&lt;h2 id="好用的指令">好用的指令&lt;/h2>
&lt;p>在每次動作前都要按 &lt;code>&amp;lt;leader&amp;gt;&lt;/code>，預設是 反斜線 &lt;code>\&lt;/code>&lt;/p>
&lt;h2 id="cspace">&lt;code>c&amp;lt;space&amp;gt;&lt;/code>&lt;/h2>
&lt;p>簡單來說就是 toggle 你的註解&lt;/p>
&lt;h2 id="ca">&lt;code>cA&lt;/code>&lt;/h2>
&lt;p>跳到行尾並在行尾加上註解&lt;/p></description></item><item><title>讓 YCM 接受 jsx</title><link>https://blog.simbafs.cc/p/linux/vim/ycm-jsx/</link><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/vim/ycm-jsx/</guid><description>&lt;h1 id="讓-ycm-接受-jsx">讓 YCM 接受 jsx&lt;/h1>
&lt;p>最近寫 ˋreact 的時候只要遇到 jsx 語法 YCM 就會跳出這個錯誤&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Cannot use JSX unless the &amp;#39;--jsx&amp;#39; flag is provided. (FixIt)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>研究之後發現這是要給 tsserver 一個 &lt;code>--jsx&lt;/code> 的 flag 就可以解決
爬文半個小時後發現只要在專案下的 &lt;code>jsconfig.json&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;compilerOptions&amp;#34;: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;target&amp;#34;: &amp;#34;es6&amp;#34;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;#34;checkJs&amp;#34;: true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ },
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;#34;compilerOptions&amp;#34;: {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ &amp;#34;jsx&amp;#34;: &amp;#34;react&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Nginx UI</title><link>https://blog.simbafs.cc/p/linux/server/nginx-ui/</link><pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/server/nginx-ui/</guid><description>&lt;h1 id="nginx-ui">Nginx UI&lt;/h1>
&lt;p>前幾天發現一個專案 nginx ui
他是一個可以讓你在網頁上更改 nginx config 的專案&lt;/p>
&lt;h2 id="安裝">安裝&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">docker pull schenkd/nginx-ui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="啟動">啟動&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">docker run -p 8080:8080 -v /etc/nginx:/etc/nginx schenkd/nginx-ui
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然後打開瀏覽器 http://localhost:8080 就可以看到管理頁面了
很陽春，就是不用 ssh 進 server，沒什麼特點
我應該是不會用這套&lt;/p></description></item><item><title>Mxlinux Change Workspace</title><link>https://blog.simbafs.cc/p/linux/mxlinux-change-workspace/</link><pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/mxlinux-change-workspace/</guid><description>&lt;h1 id="mxlinux-change-workspace">Mxlinux Change Workspace&lt;/h1>
&lt;h2 id="切換工作區">切換工作區&lt;/h2>
&lt;p>今天想要在 mxlinux 中快速的切換工作區
我看到可以用滑鼠滾輪切換
可是我想要的是鍵盤快捷鍵
上網查了一下
發現可以透過 &lt;code>Ctrl&lt;/code>+&lt;code>Alt&lt;/code>+&lt;code>up/down/home/end&lt;/code> 來切換&lt;/p>
&lt;h2 id="參考資料">參考資料&lt;/h2>
&lt;p>&lt;a class="link" href="https://unix.stackexchange.com/questions/270334/how-to-move-a-window-to-another-workspace-in-xfce" target="_blank" rel="noopener"
>https://unix.stackexchange.com/questions/270334/how-to-move-a-window-to-another-workspace-in-xfce&lt;/a>&lt;/p></description></item><item><title>GPG</title><link>https://blog.simbafs.cc/p/linux/gpg/</link><pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/gpg/</guid><description>&lt;h1 id="gpg">GPG&lt;/h1>
&lt;h2 id="sign-git-commit-with-gpg">sign git commit with gpg&lt;/h2>
&lt;p>我按照他的作法弄完後就是沒辦法 commit
他說 GPG 無法簽章
後來我發現是我的 name 填錯（應該啦，我猜的）
總而言之就重新產生 GPG key 就好了
name 和 git 設定的一樣&lt;/p>
&lt;h2 id="常見指令">常見指令&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ gpg --full-gen-key
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ gpg --list-secret-keys
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ gpg --armor --export &amp;lt;secret key&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="刪除金鑰">刪除金鑰&lt;/h2>
&lt;p>在刪除的時候分成兩步驟，刪除私鑰、刪除公鑰。在刪除之前要先知道要刪除的金鑰的 ID&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">gpg --list-keys
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>找到那串很長的文字，那就是 ID，複製起來，他起來也許會像這樣&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">JFDKSA8FEWHE29HFVC92UHFPA93WOHFVDOPA39U2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>再來用兩個指令就可以刪除了，注意一定要先刪私鑰。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">gpg --delete-secret-key &amp;lt;ID&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gpg --delete-key &amp;lt;ID&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>isolate</title><link>https://blog.simbafs.cc/p/linux/isolate/</link><pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/isolate/</guid><description>&lt;h1 id="isolate">isolate&lt;/h1>
&lt;p>我有一個放了很久的計畫，就是自己寫一個 OJ，因為我覺得現在的那個太難用了。
我很快的建立 repo 但是卻完全沒有進展，我寫了一個 shell script 幫忙編譯執行程式之後我就在也沒有動過他了
我沒有繼續動工的原因是我不知道如何隔離使用者提交的程式碼
我想過 docker 可是據說還是不安全
還有 chroot 但是我不知道有沒有比 docker 安全而且設定好麻煩&lt;/p>
&lt;p>昨天去考 TOI 　入營考（當然沒進）的時候，我終於看到大名鼎鼎的 CMS 了！
出來之後我發現他是用一個叫 isolate 的程式來做沙箱測試
而且這好像是 IOI 自己寫的，應該是蠻安全的（吧？）
今天成功編譯過後把心得寫下來&lt;/p>
&lt;hr>
&lt;h2 id="編譯">編譯&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ git clone https://github.com/ioi/isolate/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cd isolate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo apt install asciidoc libcap-dev
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ make
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>耶！編譯/安裝完成了&lt;/p>
&lt;hr>
&lt;h2 id="建立沙箱執行程式">建立沙箱/執行程式&lt;/h2>
&lt;p>建立好之後切到 root 去
用&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># isolate --init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/var/local/lib/isolate/0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>建立一個新的沙箱
他會輸出沙箱所在的目錄&lt;/p>
&lt;p>接下來把要執行的檔案放在 &lt;code>/var/local/lib/isolate/0/box&lt;/code> 裡面（要給執行權）
hello.sh&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nb">echo&lt;/span> Hello World
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>然後&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># isolate --run hello.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hello World
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OK (0.005 sec real, 0.020 sec wall)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>他最後會輸出執行時間和執行成功的訊息
其他的內容等等再補&lt;/p></description></item><item><title>youtube-dl</title><link>https://blog.simbafs.cc/p/linux/youtube-dl/</link><pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/youtube-dl/</guid><description>&lt;h1 id="youtube-dl">Youtube DL&lt;/h1>
&lt;p>最近在下載 youtube 音樂，每次下載都要把檔案重新改名，很麻煩。所以就想要寫一個 shell script 來幫我解決。
首先改名字我相信 youtube-dl 一定有提供這個選項，於是開始查文件。
看到 &lt;code>-o&lt;/code> ，接下來講遇到的坑&lt;/p>
&lt;h2 id="-o-坑">&lt;code>-o&lt;/code> 坑&lt;/h2>
&lt;p>&lt;code>-o&lt;/code> 後面接的是一個 template string ，不是檔名，而且就算指定副檔名是 .mp3 了還是要寫成 &lt;code>%(ext)s&lt;/code>&lt;/p></description></item><item><title>SSH Tunnel</title><link>https://blog.simbafs.cc/p/linux/ssh-tunnel/</link><pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/ssh-tunnel/</guid><description>&lt;h1 id="ssh-tunnel">SSH Tunnel&lt;/h1>
&lt;p>昨天架好了 reverse ssh 讓我可以連回學校 server
今天來研究 ssh tunnel&lt;/p>
&lt;h2 id="簡介">簡介&lt;/h2>
&lt;p>ssh tunnel 分正反向
其實他們的差別只有在方向不一樣
連語法參數都一樣&lt;/p>
&lt;h2 id="正向-tunnel">正向 tunnel&lt;/h2>
&lt;p>正向的 tunnel 參數是 -L
語法：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ssh -L [bind_address:]port:host:hostport
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh -L [bind_address:]port:remote_socket
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh -L local_socket:host:hostport
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh -L local_socket:remote_socket
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="反向-tunnel">反向 tunnel&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ssh -R [bind_address:]port:host:hostport
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh -R [bind_address:]port:local_socket
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh -R remote_socket:host:hostport
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh -R remote_socket:local_socket
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ssh -R [bind_address:]port
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="心得">心得&lt;/h2>
&lt;p>看起來好像很難
但是其實用下面這個就夠了
正向：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ssh -L &amp;lt;local port&amp;gt;:localhost:&amp;lt;remote port&amp;gt; &amp;lt;user&amp;gt;@&amp;lt;remote&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>反向;&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">ssh -R &amp;lt;remote port&amp;gt;:localhost:&amp;lt;local port&amp;gt; &amp;lt;user&amp;gt;@&amp;lt;remote&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>總而言之就是前面的和選項一樣
如果是 -L 那前面就是 local port
如果是 -R 那前面就是 remote port&lt;/p>
&lt;h2 id="參考連結">參考連結&lt;/h2>
&lt;p>&lt;a class="link" href="https://johnliu55.tw/ssh-tunnel.html" target="_blank" rel="noopener"
>https://johnliu55.tw/ssh-tunnel.html&lt;/a>&lt;/p></description></item><item><title>Reverse SSH</title><link>https://blog.simbafs.cc/p/linux/reverse-ssh/</link><pubDate>Sun, 23 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/reverse-ssh/</guid><description>&lt;h1 id="reverse-ssh">Reverse SSH&lt;/h1>
&lt;p>一直以來連線回社辦的電腦都要走 webtty 再開 tmate
但是今天發現了一個新的方法可以透過反向的 ssh 連回社辦&lt;/p>
&lt;h2 id="reverse-ssh-1">reverse ssh&lt;/h2>
&lt;p>在社辦電腦&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ ssh -NfR 2222:localhost:22 simba@simba-vps
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這可以建立一個連線
這時候到 simba-vps&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ ssh server@localhost -p 2222
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>就可以連線回社辦伺服器了&lt;/p>
&lt;h2 id="autossh">autossh&lt;/h2>
&lt;p>但是這樣做 ssh 連線有可能會超時然後斷掉
這時候可以透過 autossh 來幫我們自動建立連線
在社辦電腦&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ apt install autossh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ autossh -Mf 2222 -NR 1111:localhost:22 simba@simba-vps -p 22
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>這樣就可以在 vps 上&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ ssh server@localhost -p 1111
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>來連回社辦啦！
最後可以把這堆在 vps 上再做一次就可以在 internet 連回社辦伺服器了&lt;/p>
&lt;h2 id="參考網址">參考網址&lt;/h2>
&lt;p>&lt;a class="link" href="https://stackoverflow.com/questions/15983795/how-do-i-establish-a-bidirectional-ssh-tunnel" target="_blank" rel="noopener"
>https://stackoverflow.com/questions/15983795/how-do-i-establish-a-bidirectional-ssh-tunnel&lt;/a>&lt;br>
&lt;a class="link" href="https://ez3c.tw/2043" target="_blank" rel="noopener"
>https://ez3c.tw/2043&lt;/a>&lt;br>
&lt;a class="link" href="https://www.ubuntu-tw.org/modules/newbb/viewtopic.php?viewmode=compact&amp;amp;topic_id=17538&amp;amp;forum=7" target="_blank" rel="noopener"
>https://www.ubuntu-tw.org/modules/newbb/viewtopic.php?viewmode=compact&amp;topic_id=17538&amp;forum=7&lt;/a>&lt;br>
&lt;a class="link" href="http://blog.adahsu.net/2007/11/ssh-reverse-tunnel.html" target="_blank" rel="noopener"
>http://blog.adahsu.net/2007/11/ssh-reverse-tunnel.html&lt;/a>&lt;br>
&lt;a class="link" href="https://codertw.com/%E4%BC%BA%E6%9C%8D%E5%99%A8/377688/" target="_blank" rel="noopener"
>https://codertw.com/%E4%BC%BA%E6%9C%8D%E5%99%A8/377688/&lt;/a>&lt;br>
這篇講 ssh tunnel 最清楚&lt;br>
&lt;a class="link" href="https://yu-jack.github.io/2019/01/08/ssh-tunnel/" target="_blank" rel="noopener"
>https://yu-jack.github.io/2019/01/08/ssh-tunnel/&lt;/a>&lt;/p></description></item><item><title>Server Tool</title><link>https://blog.simbafs.cc/p/linux/server/server-tool/</link><pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/server/server-tool/</guid><description>&lt;h1 id="server-tool">Server Tool&lt;/h1>
&lt;h2 id="用-bash-寫-log-分析工具">用 bash 寫 log 分析工具&lt;/h2>
&lt;p>因為我們的 server 不知道是為什麼一直受到 DDoS 攻擊&lt;br>
我想知道是什麼時段容易受到攻擊和每次多久、來自那個 ip&lt;br>
於是我花了一點時間寫了幾個簡單的 script&lt;/p>
&lt;hr>
&lt;h3 id="先來講我遇到的坑好了">先來講我遇到的坑好了&lt;/h3>
&lt;h4 id="sh">sh&lt;/h4>
&lt;p>過程中遇到一個最大的坑是在 ubuntu 預設的 sh 不是 bash
是 dash
據說比較情輕薄&lt;br>
我在試 bash 中數字的運算比較時踩到這個坑&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span> a &amp;gt; b &lt;span class="o">))&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> yes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> no
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>因為我在試語法是否正確
開了一個新的檔案
我懶的 &lt;code>chmod&lt;/code> 直接 &lt;code>sh tt.sh&lt;/code>
結果 &lt;code>sh&lt;/code> 是 dash
dash 沒有支援這個語法
然後抓了快 20 分鐘的 bug
還是乖乖寫 &lt;code>#!/bin/bash&lt;/code> 吧&lt;/p>
&lt;h4 id="floating-point-number">floating point number&lt;/h4>
&lt;p>我的 script 中有用浮點數的除法
但是 bash 只支援整數
所以除出來都是 0
這個坑沒有很大
很容易解決
只要使用 &lt;code>bc&lt;/code> 這個指令就可以了&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ bc -l &lt;span class="o">&amp;lt;&amp;lt;&amp;lt;&lt;/span> &lt;span class="s1">&amp;#39;100/3&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">33.33333333333333333333
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="associate-array">Associate array&lt;/h4>
&lt;p>在有一個地方本來要用關聯式陣列來存一些資料
在定義關聯是陣列要把 &lt;code>-a&lt;/code> 改成 &lt;code>-A&lt;/code>
這邊遇到什麼問題有點忘記了
想到再補起來
反正最後沒有用關聯式陣列&lt;/p>
&lt;hr>
&lt;h3 id="其他">其他&lt;/h3>
&lt;h4 id="程式碼">程式碼&lt;/h4>
&lt;p>&lt;a class="link" href="https://github.com/simba-fs/server-tool" target="_blank" rel="noopener"
>https://github.com/simba-fs/server-tool&lt;/a>
介紹：&lt;/p>
&lt;h4 id="barsh">bar.sh&lt;/h4>
&lt;p>Draw a bar from data&lt;/p>
&lt;h4 id="countsh">count.sh&lt;/h4>
&lt;p>Count how many times does each line appear in file&lt;/p>
&lt;h4 id="ipsh">ip.sh&lt;/h4>
&lt;p>Count how many times does each ip send a request&lt;/p>
&lt;h4 id="timesh">time.sh&lt;/h4>
&lt;p>Count how many request in each secend/minute/hour/day&lt;/p>
&lt;h4 id="好站連結">好站連結&lt;/h4>
&lt;p>&lt;a class="link" href="https://www.regextester.com/" target="_blank" rel="noopener"
>https://www.regextester.com/&lt;/a>
這個網站可以測試 RegEx
蠻不錯的&lt;/p></description></item><item><title>ddos</title><link>https://blog.simbafs.cc/p/linux/server/ddos/</link><pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/server/ddos/</guid><description>&lt;h1 id="ddos">DDOS&lt;/h1>
&lt;h2 id="伺服器被-ddos-惹">伺服器被 DDoS 惹&lt;/h2>
&lt;p>今天早上把社團的 reverse proxy server 換成 nginx&lt;br>
下午心血來潮看看 log 檔
因為沒有寫好的工具&lt;br>
首先把 log 檔 cp 到我的電腦再來處理&lt;/p>
&lt;hr>
&lt;p>先寫了一個 script 來計算重複的行數&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1"># count.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">declare&lt;/span> -A cnt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> id extre
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">let&lt;/span> cnt&lt;span class="o">[&lt;/span>&lt;span class="nv">$id&lt;/span>&lt;span class="o">]&lt;/span>++
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> id in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">!cnt[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$id&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">cnt&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">$id&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>再來用 &lt;code>awk&lt;/code> 把 &lt;code>status code&lt;/code> 是 404 的 ip 挑出來
然後丟給 &lt;code>count.sh&lt;/code> 計算每個 ip 有幾個 404
最後再存到 &lt;code>404-ip.txt&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">awk &lt;span class="s1">&amp;#39;$9 == 404 {print $1}&amp;#39;&lt;/span> access.log &lt;span class="p">|&lt;/span> ./count.sh &amp;gt; 404-ip.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>再來用 &lt;code>sort&lt;/code> 來排序剛剛的 &lt;code>404-ip.txt&lt;/code>，存到 &lt;code>404-ip-sorted.txt&lt;/code>
&lt;code>sort&lt;/code> 加上 &lt;code>-n&lt;/code> 選項讓他以數字順數排序，預設是以 ascii 順序排序
&lt;code>-r&lt;/code> 讓他由大到小
&lt;code>-k2&lt;/code> 指定以第二欄排序，預設以空白分開，可以用 &lt;code>-t&lt;/code> 改變分隔符號&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">sort -n 404-ip.txt -k2 -r &amp;gt; 404-ip-sorted.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;p>這時候來看看 &lt;code>404-ip-sorted.txt&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ head 404-ip-sorted.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">91.199.118.175 1329180
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">91.199.118.212 259477
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">163.172.12.108 145050
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">195.154.161.234 142920
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">195.154.102.22 142450
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">195.154.102.191 137800
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">163.172.12.148 132650
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">62.210.220.48 129248
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">195.154.102.159 11353
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">62.210.85.48 11206
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>哇賽！第一名的 ip 送了一百三十多萬個請求&lt;br>
這份 log 檔是在早上十點多才開始紀錄的&lt;br>
平均每秒 41 個請求
這麼多鐵定是 ddos
我們來看看完整的檔案看看有多少人在 DDoS 我們的 server
嗯，總共十九個破千的&lt;br>
這些通通有問題（其實應該以平均請求數來看，但太複雜了所以以後再補
接下來就接把這幾個 ip ban 掉&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ sudo su
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> /etc/nginx/sites-enabled/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ vi banned-ip.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>將 ip 貼到文件裡面
在一般模式下執行&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[esc] :%s/^/deny /
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">[esc] :%s/&amp;amp;/;/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> ../sites-enabled
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ln -s ../sites-available
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>$ nginx -t&lt;/code> 確認設定檔沒問題
&lt;code>$ systemctl restart nginx&lt;/code> 來重啟伺服器
然後就大公告成了～～
明天再來看看有沒有問題&lt;/p></description></item><item><title>Nginx Reverse Proxy Setup</title><link>https://blog.simbafs.cc/p/linux/server/nginx-reverse-proxy-setup/</link><pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate><guid>https://blog.simbafs.cc/p/linux/server/nginx-reverse-proxy-setup/</guid><description>&lt;h1 id="nginx-反向代理伺服器-reverse-proxy">nginx 反向代理伺服器 (reverse proxy)&lt;/h1>
&lt;p>之前社網 server 因為學校防火牆限制只能對外開 80 443 兩個 port&lt;br>
而且我們只有一個 ip (203.64.138.177)&lt;br>
所以要用 reverse proxy 來代理我們的多項服務&lt;br>
原本我只會用 apache2
後來不知道是不是因為 apache 太肥導致有時候回應時間會很久&lt;br>
所以我起了將 proxy server 換成 nginx 的想法&lt;/p></description></item></channel></rss>